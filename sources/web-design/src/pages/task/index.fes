<template>
    <div class="task-main">
        <fes-search-panel>
            <Wb-form type="query" :label-width="150">
                <Form-item :label="$t('task.ZYID')">
                    <wb-input v-model="query.jobId" type="number" :placeholder="$t('task.QSR')" @on-enter="search(pagination.current, pagination.size)" />
                </Form-item>
                <Form-item :label="$t('task.RWMC')">
                    <wb-input v-model="query.jobName" :placeholder="$t('task.QSR')" @on-enter="search(pagination.current, pagination.size)" />
                </Form-item>
                <Form-item :label="$t('task.RWZT')">
                    <Wb-select v-model="query.status" :placeholder="$t('task.XZRWZT')">
                         <wb-option value="" :label="$t('task.XZRWZT')" />
                         <wb-option value="COMMIT" :label="$t('message.newAllPage.Inthequeue')" />
                         <wb-option value="RUNNING" :label="$t('message.newAllPage.Intheoperationofthe')" />
                         <wb-option value="KILL" :label="$t('message.newAllPage.Hasstopped')" />
                         <wb-option value="SUCCESS" :label="$t('message.newAllPage.Executesuccessfully')" />
                         <wb-option value="FAILD" :label="$t('message.newAllPage.Onfailure')" />
                         <wb-option value="RUNNING_TIMEOUT" :label="$t('message.newAllPage.Runatimeout')" />
                     </Wb-select>
                </Form-item>
                <Form-item :label="$t('task.KSSJ')">
                    <Wb-input-date-picker v-model="query.triggerTimeBegin" enable-seconds enable-time clearable />
                </Form-item>
                <Form-item :label="$t('task.JSSJ')">
                     <Wb-input-date-picker v-model="query.triggerTimeEnd" enable-seconds enable-time clearable />
                 </Form-item>
            </Wb-form>
            <div slot="button">
                <Wb-button type="primary" icon="search" @click="search(pagination.current, pagination.size)">
                {{ $t('task.CX') }}
                </Wb-button>
            </div>
        </fes-search-panel>
        <fes-list-panel>
            <Wb-table :data="data" :no-data-text="$t('task.ZWSJ')">
                <Column prop="id" name="ID" width="90px" />
                <Column prop="executerAddress" :name="$t('task.ZXJD')" width="130px" />
                <Column prop="jobName" width="110px" :name="$t('task.RWMC')" />
                <Column prop="triggerType" width="60px" :name="$t('task.CFLX')" />
                <Column prop="triggerTime" width="120px" :name="$t('task.CFSJ')" />
                <Column prop="speed" width="90px" :name="`${$t('message.newAllPage.rate')}(M/s)`" :classes="speedLimitStyle" />
                <Column prop="operater" width="90px" :name="$t('task.ZXYH')" />
                <Column width="80px" :name="$t('task.ZT')" :component="statusCompoennt" />
                <Column prop="completeTime" width="120px" :name="$t('task.WCSJ')" />
                <Column :component="tooltipComponent" width="40px" :name="$t('task.CS')" />
                <Column :component="operationComponent" :name="$t('task.CZ')" width="180px" />
            </Wb-table>
                <Pagination class="page-center" :loking="pagination.locking" :current="pagination.current" :size="pagination.size" :total="pagination.total" @on-change="changePage" />
        </fes-list-panel>
        <weModal ref="detailLogModal" v-model="detailShow" :name="$t('task.RWYXRZ')" width="1000" :footer-disable="false" @onConfirm="detailLog_close" @onClose="detailLog_close">
            <div class="ui-input-swap ui-input-textarea textarea-height">
                <textarea id="tt" v-model="textarea" class="ui-input" readonly />
            </div>
            <div class="button-box">
                <Wb-button class="prepage" type="primary" :disabled="disabled" @click="prePage">
                {{ $t('task.SYY') }}
                </Wb-button>
                <Wb-button class="prepage" type="primary" :disabled="disabled" @click="nextPage">
                {{ $t('task.XYY') }}
                </Wb-button>
                <Wb-button type="primary" :disabled="disabled" @click="newLog">
                {{ $t('task.CKZXRZ') }}
                </Wb-button>
            </div>
        </weModal>
        <weModal v-model="speedLimitShow" :title="$t('message.newAllPage.Setoperationrate')" @onConfirm="setSpeedLimit">
            <Wb-form ref="speedLimit" :label-width="80" :rule="ruleValidate">
                <Form-item
                    :label="$t('message.newAllPage.Operatingrate')" prop="speedLimit">
                    <Wb-input v-model="currentSpeedLimit" :placeholder="$t('message.newAllPage.Pleaseentertheoperationrate')" />
                </Form-item>
            </Wb-form>
        </weModal>
    </div>
</template>
<script type="text/ecmascript-6">
import weLoading from '../../components/uiTemplate/weLoading.fes';
import weModal from '../../components/uiTemplate/weModal.fes';
import {LOGBUTTON} from '../../constants/common.js';
export default {
    FesDataCache: 'log',
    FesHeader: false,
    data() {
        const validateSpeedLimit = (rule, value, callback) => {
            if (/^[0-9]+$/.test(value)) {
                if (value > 100 * 1024) {
                    callback(new Error(`${this.$t('components.ZYSLBCG')}100G`));
                }
                if (value <= 0) {
                    callback(new Error(this.$t('message.newAllPage.Pleaseenterthecorrectnumber')));
                }
                callback();
            } else {
                callback(new Error(this.$t('message.newAllPage.Pleaseenterthecorrectnumber')));
            }

        }
        let that = this;
        return {
            query: {
                jobId: '',
                jobName: '',
                status: '',
                triggerTimeBegin: null,
                triggerTimeEnd: null
            },
            searchTimestamp: 0,
            refreshTimestamp: 0,
            textarea: '',
            data: [],
            pagination: {
                size: 10,
                current: 1,
                total: 0
            },
            logLock: false,
            logTimer: null,
            logStatusTimer: null,
            detailShow: false,
            windSize: 50,
            taskId: '',
            endLineNum: '',
            startLineNum: '',
            disabled: true,
            buttonFlag: '',
            timer: '',
            speedLimitShow: false,
            currentSpeedLimit: '',
            operationComponent: function (trData) {
                return new Vue({
                    data() {
                        return {
                            trData: trData
                        }
                    },
                    methods: {
                        logDetailButton(Data) {
                            that.textarea = '';
                            if (Data.status === 'RUNNING' || Data.status === 'RUNNING_TIMEOUT') {
                                that.disabled = true;
                            } else {
                                that.disabled = false;
                            }
                            that.logDetail(Data.id, -1, -50);
                            that.taskId = Data.id
                        },
                        KILLButton(Data) {
                            that.$Message.confirm(that.$t('task.ZZRW'), that.$t('task.SFZZRW')).then( (index) => {
                                if (index === 0) {
                                    that.logLock = true;
                                    that.FesApi.fetch('/jobtask/kill/' + Data.id, {}, 'post').then(() => {
                                        that.search(that.pagination.current, that.pagination.size);
                                        that.$Toast.success(that.$t('task.RWYZZ'));
                                    }).catch(() => {
                                        that.logLock = false;
                                    });
                                }
                            });
                        },
                        deteleButton(Data) {
                            that.$Message.confirm(that.$t('task.SCRZ'), that.$t('task.SFSCRZ')).then( (index) => {
                                if (index === 0) {
                                    that.logLock = true;
                                    that.FesApi.fetch('/jobtask/delete/' + Data.id, 'delete').then(() => {
                                        that.search(that.pagination.current, 10);
                                        that.$Toast.success(that.$t('task.SCRZCG'));
                                    }).catch(() => {
                                        that.logLock = false;
                                    })
                                }
                            });
                        },
                        speedLimitAciton(Data) {
                            // $t('message.newAllPage.Displayinputbox')
                            if (['RUNNING', 'RUNNING_TIMEOUT'].includes(trData.status)) {
                                that.speedLimitShow = true;
                                that.currentSpeedLimit = Data.speedLimit || '';
                                that.taskId = Data.id
                            } else {
                                that.$Toast(that.$t('message.newAllPage.Theexecutionoftaskcanbesetup'));
                            }
                        }
                    },
                    template: `<div><span v-if="trData.status === 'RUNNING' || trData.status === 'RUNNING_TIMEOUT'" class="component-button" @click="KILLButton(trData)">KILL</span><span class="component-button" @click="logDetailButton(trData)">${that.$t('task.XXRZ')}</span><span v-if="trData.status !== 'COMMIT'" style="display: none;" class="component-button" @click="deteleButton(trData)">${that.$t('task.SC')}</span><span class="component-button last-button" @click="speedLimitAciton(trData)">${that.$t('message.newAllPage.Thedynamicspeedlimit')}</span></div>`
                })
            },
            tooltipComponent: function (trData) {
                return new Vue({
                    data() {
                        return {
                            taskParams: Object.entries(trData.taskParams),
                            option1: {
                                direction: 'left',
                                align: 'center',
                                component: new Vue({
                                    data() {
                                        return {
                                            a: trData.taskParams
                                        }
                                    },
                                    template: '<span>{{a}}</span>'
                                })
                            }
                        }
                    },
                    methods: {
                        defaultValue() {
                            return `${this.taskParams[0][0]} : ${this.taskParams[0][1]}`
                        }
                    },
                    template: `<Wb-button v-tooltip="option1">{{defaultValue()}}</Wb-button>`
                })
            },
            statusCompoennt: function (trData) {
                return new Vue({
                    data() {
                        return {
                            trData
                        }
                    },
                    methods: {
                        statusFilter(Data) {
                            switch (Data.status) {
                                case 'SUCCESS':
                                    return {color: 'SUCCESS', lable: that.$t('message.newAllPage.Executesuccessfully')};
                                case 'RUNNING':
                                    return {color: 'RUNNING', lable: that.$t('message.newAllPage.Intheoperationofthe')};
                                case 'FAILD':
                                    return {color: 'FAILD', lable: that.$t('message.newAllPage.Onfailure')};
                                case 'RUNNING_TIMEOUT':
                                    return {color: 'RUNNING_TIMEOUT', lable: that.$t('message.newAllPage.Runatimeout')};
                                case 'COMMIT':
                                    return {color: 'COMMIT', lable: that.$t('message.newAllPage.Inthequeue')};
                                case 'KILL':
                                    return {color: 'KILL', lable: that.$t('message.newAllPage.Hasstopped')};
                                default:
                                    return {color: '', lable: '---'};
                            }
                        }
                    },
                    template: `<span :class="statusFilter(trData).color">{{statusFilter(trData).lable}}</span>`
                })
            },
            ruleValidate: {
                speedLimit: [
                    {required: true, message: this.$t('components.SRZQZYSL')},
                    {validator: validateSpeedLimit, trigger: 'change'}
                ]
            }
        }
    },
    components: {
        weLoading,
        weModal
    },
    FesReady() {
        this.logLock = true;
        this.search();
    },
    watch: {
        data: {
            handler(newVal, oldVal) {
                if (oldVal.length > 0) {
                    newVal.map((item, index) => {
                        if (oldVal[index] && item.status !== oldVal[index].status && item.id === oldVal[index].id) {
                            if (item.status === 'SUCCESS') {
                                this.$Toast.success(`${this.$t('task.RW')}:${item.jobName},ID:${item.id}${this.$t('task.ZXCG')}！`);
                            } else if (item.status === 'FAILD') {
                                this.$Toast.success(`${this.$t('task.RW')}:${item.jobName},ID:${item.id}${this.$t('task.ZXSB')}！`);
                            }
                        }
                    })
                }
            },
            deep: true
        }
    },
    beforeDestroy() {
        clearTimeout(this.logTimer);
        clearTimeout(this.timer);
    },
    methods: {
        logDetail(taskId, startLine, windSize) {
            if (!this.logLock) {
                this.logLock = true;
                this.FesApi.fetch('/jobtask/log', {
                    taskId: taskId,
                    startLine: startLine,
                    windSize: windSize
                }, 'get').then(rst => {
                    this.logLock = false;
                    if (rst.endLineNum !== rst.startLineNum) {
                        this.endLineNum = rst.endLineNum;
                        this.startLineNum = rst.startLineNum;
                    }
                    if (parseInt(rst.endLineNum) < 0) {
                        this.$Toast.warn(this.$t('task.WFHQRZ'));
                    } else {
                        if (typeof (rst.logContent) !== 'undefined') {
                            this.textarea = rst.logContent;
                        }
                        this.showLog();
                        if (!rst.end) {
                            this.logTimer = setTimeout(() => {
                                this.logDetail(taskId, -1, -50);
                            }, 5000);
                        } else {
                            this.disabled = false;
                        }
                    }
                }).catch(() => {
                    this.logLock = false;
                });
            }
        },
        newLine(event) {
            event.target.scrollTop = event.target.scrollHeight;
        },
        showLog() {
            this.detailShow = true;
        },
        detailLog_close() {
            if (null != this.logTimer) {
                clearTimeout(this.logTimer);
                this.logTimer = null;
            }
            this.logLock = false;
        },
        search(current = 1, size = 10) {
            this.pagination.total = 0;
            this.FesApi.fetch('/jobtask/pageList', {
                taskId: this.query.jobId,
                fuzzyName: this.query.jobName,
                status: this.query.status,
                triggerTimeBegin: this.query.triggerTimeBegin,
                triggerTimeEnd: this.query.triggerTimeEnd,
                page: current,
                pageSize: size
            }, 'get').then((data) => {
                // update search time
                if (this.timer) {
                    clearTimeout(this.timer);
                }
                this.searchTimestamp = new Date().getTime();
                this.data = data.data;
                this.pagination.total = data.totalPages;
                this.pagination.current = current;
                this.pagination.size = size;
                this.logLock = false;
                this.repetitionRunning();

            }).catch(() => {
                clearTimeout(this.timer);
                this.repetitionRunning();
                this.logLock = false;
            });
        },
        repetitionRunning() {
            if (this.data.length > 0) {
                let runningLog = {};
                for (let i in this.data) {
                    let log = this.data[i];
                    if ( log.status === 'RUNNING' || log.status === 'COMMIT' || log.status === 'RUNNING_TIMEOUT') {
                        runningLog[i] = log.id;
                    }
                }
                let length = Object.keys(runningLog).length;
                if (length > 0) {
                    this.timer = setTimeout(() => {
                        this.search(this.pagination.current, this.pagination.size);
                    }, 6000)
                }
            }
        },
        changePage({ current, size}) {
            this.search(current, size);
        },
        prePage() {
            this.detailLog_close();
            if (this.buttonFlag === LOGBUTTON.NEXT) {
                this.logDetail(this.taskId, this.startLineNum, -50);
            } else {
                this.logDetail(this.taskId, this.endLineNum, -50);
            }
            this.buttonFlag = LOGBUTTON.PRE;
        },
        nextPage() {
            this.detailLog_close();
            if (this.buttonFlag === LOGBUTTON.PRE) {
                this.logDetail(this.taskId, this.startLineNum, 50);
            } else {
                this.logDetail(this.taskId, this.endLineNum, 50);
            }
            this.buttonFlag = LOGBUTTON.NEXT;
        },
        newLog() {
            this.buttonFlag = null;
            this.detailLog_close();
            this.logDetail(this.taskId, -1, -50);
        },
        setSpeedLimit() {
            this.$refs.speedLimit.validate((validate) => {
                if (validate) {
                    this.FesApi.fetch(`/jobtask/${this.taskId}/speed/limit/${this.currentSpeedLimit}`, {}, 'put').then((res) => {
                        this.search(this.pagination.current, this.pagination.size);
                    })
                } else {
                    this.speedLimitShow = true;
                }
            })
        },
        speedLimitStyle(data) {
            if (data >= 1 && data < 50) {
                return 'normal';
            } else if (data >= 50 && data < 100) {
                return 'warnig';
            } else if (data >= 100) {
                return 'error';
            }
        }
    }
}
</script>
<style>
.task-main {
    height: 100%;
    overflow: auto;

}
    .ui-input-swap textarea.ui-input{
        height: 100%;
        resize: none;
    }
    .textarea-height {
        height: 450px;
    }
    .component-button {
        cursor: pointer;
        padding: 0 8px;
        color: #3399ff;
        border-right: 1px solid #e3e8ee;
    }
    .last-button {
        border: none;
    }
    .button-box {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 15px;
    }
    .prepage {
            margin-right: 40px;
        }
    .error {
        background-color: rgb(255, 102, 0);
    }
    .warnig {
        background-color: rgb(255, 173, 51);
    }
    .normal {
        background-color: rgb(51, 214, 133);
    }
    /* $t('message.newAllPage.Thecolorofthestate') */
    .SUCCESS {
        color: rgb(51, 214, 133);
    }
    .RUNNING {
        color: #3399ff
    }
    .FAILD {
        color:rgb(255, 102, 0);
    }
    .RUNNING_TIMEOUT {
        color: rgb(255, 173, 51);
    }
    .COMMIT {
        color: #2db7f5;
    }
    .KILL {
        color: red;
    }
    .page-center {
        justify-content: center;
    }
</style>