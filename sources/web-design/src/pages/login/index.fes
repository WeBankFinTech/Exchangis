<template>
  <div class="udes-login">
    <div class="login-content">
      <h2 class="sys-title">
{{ $t('message.newAllPage.Welcometologin') }}
</h2>
      <Wb-form ref="loginForm" :label-width="0" :rule="loginRule">
        <Form-item prop="userName">
          <wb-input v-model="userName" :placeholder="$t('message.newAllPage.Pleaseenteryourusername')" :maxlength="150" @on-enter="loginAction" />
        </Form-item>
        <Form-item prop="password">
          <wb-input v-model="password" type="password" :placeholder="$t('message.newAllPage.Pleaseenterthepassword')" :maxlength="150" @on-enter="loginAction" />
        </Form-item>
        <Form-item>
          <Wb-button type="primary" long @click="loginAction">
{{ $t('message.newAllPage.Thelogin') }}
</Wb-button>
        </Form-item>
      </Wb-form>
    </div>
  </div>
</template>
<script>
import {RSA} from '../../constants/ras.js'
export default {
    FesLeft: false,
    data() {
        return {
            userName: '',
            password: '',
            loginRule: {
                userName: [
                    {required: true, message: this.$t('message.newAllPage.Pleaseenteryourusername')},
                    {
                        type: 'string',
                        pattern: /^[a-zA-Z][a-zA-Z0-9_]*$/,
                        message: `${this.$t('message.newAllPage.Musthavealetter')}，${this.$t('message.newAllPage.Andonlysupportletter')}、${this.$t('message.newAllPage.digital')}、${this.$t('message.newAllPage.Theunderline')}`,
                        trigger: 'change'
                    },
                    {message: `${this.$t('message.newAllPage.Namecannotbemorethanlength')}200`, max: 200}
                ],
                password: [
                    {required: true, message: this.$t('message.newAllPage.Pleaseenterthepassword')},
                    {message: `${this.$t('message.newAllPage.Passwordlengthcantmorethan')}20`, max: 20}
                ]
            }
        }
    },
    methods: {
        roleName(val) {
            if (val === 'super') {
                return this.$t('message.newAllPage.Thesuperuser');
            } else if (val === 'admin') {
                return this.$t('message.newAllPage.Manageusers');
            } else if (val === 'user') {
                return this.$t('message.newAllPage.Theaverageuser')
            } else {
                return this.$t('message.newAllPage.Notloggedin')
            }
        },
        loginAction() {
            const key = RSA.getPublicKey('-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCQT/eMMgLf6MvSY1JWVI5KOPeWh+Lb3v6J7nMJVaok8V0vEqRmYc3A5dh3+VXmxslrpWSBhiom/43b/y3f2/g8jEpmxU1MEyq1l8i4rnx6fJP60od5hLmGdbNexnh9MksEqSx10nAYsH0trZ71bZJnQkuK/m70oMXjr0HAwJafBwIDAQAB-----END PUBLIC KEY-----');
            const password = RSA.encrypt(this.password, key);
            this.$refs.loginForm.validate(validate => {
                if (validate) {
                    this.FesApi.fetch('/auth/login', {loginUser: this.userName, loginPwd: password}, 'post').then((res) => {
                        this.FesApp.setRole(res.role);
                        this.FesApp.set('FesUserName', res['X-AUTH-ID']);
                        this.FesApp.set('FesRoleName', this.roleName(res.role));
                        this.FesStorage.set('currentUser', res['X-AUTH-ID']);
                        this.FesStorage.set('userRole', res.role);
                        this.FesApp.router.push('/ds/newManager');
                    })
                }
            })
        }
    }
}
</script>
<style lang="scss" scoped>
.udes-login {
  // background-color: #3399bb;
  background: url('../../assets/images/login.svg') center center no-repeat;
  height: 100%;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
}
.login-content {
  width: 400px;
  border: 1px solid #eee;
  position: absolute;
  top: 30%;
  left: 50%;
  margin-left: -200px;
  padding: 20px 40px;
  text-align: center;
  background-color: #fff;
  border-radius: 5px;
  .sys-title {
    color: #3399ff;
  }
}
</style>

