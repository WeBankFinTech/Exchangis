<template>
    <div class="full-height">
        <fes-search-panel>
            <Wb-form type="query" :label-width="150">
                <Form-item :label="$t('sys.user.YHM')">
                    <wb-input v-model="query.userName" :placeholder="$t('sys.user.QSR')" @on-change="changeSearch" />
                </Form-item>
            </Wb-form>
            <div slot="button">
                <Wb-button type="primary" icon="search" @click="search()">
                {{ $t('sys.user.CX') }}
                </Wb-button>
            </div>
        </fes-search-panel>
        <div class="button-row">
           <Wb-button type="primary" icon="plus" @click="showAdd">
             {{ $t('sys.user.XZYH') }}
            </Wb-button>
        </div>
        <fes-list-panel>
            <Wb-table :data="data" :no-data-text="$t('sys.user.ZSWSJ')">
                <Column prop="userName" :name="$t('sys.user.YHM')" />
                <Column :name="$t('sys.user.YHLX')" :component="userTypeComponent" />
                <Column prop="createTime" :name="$t('sys.user.CJSJ')" />
                <Column prop="updateTime" :name="$t('sys.user.XGSJ')" />
                <Column :name="$t('sys.user.CZ')" :action="userAction" />
            </Wb-table>
            <div class="page-pagination">
                <Pagination :loking="pagination.locking" :current="pagination.current" :size="pagination.size" :total="pagination.total" @on-change="changePage" />
            </div>
        </fes-list-panel>
         <weModal v-model="modalShow" :title="modalTitle" width="500" :closable="false" @onConfirm="addNodeConfirm">
            <Wb-form ref="addForm" :rule="ruleAdd" :label-width="100">
                <Form-item
                    :label="$t('sys.user.SZMC')" prop="userName">
                    <wb-input v-model="newUserData.userName" :placeholder="$t('sys.user.SRYHM')" :disabled="actionType === 'resetPassword'" />
                </Form-item>
                <Form-item :label="$t('sys.user.YHLX')">
                    <wb-select v-model="newUserData.userType" :placeholder="$t('sys.user.YHLX')" :disabled="actionType === 'resetPassword'">
                        <wb-option :value="0">
                        {{ $t('sys.user.PTYH') }}
                        </wb-option>
                        <wb-option :value="1">
                        {{ $t('sys.user.GLYH') }}
                        </wb-option>
                        <wb-option :value="2">
                            {{ $t('sys.user.CJYH') }}
                        </wb-option>
                    </Wb-select>
                </Form-item>
                <Form-item
                    v-if="actionType === 'add' || actionType === 'resetPassword'"
                    :label="$t('sys.Initialpassword')" prop="firstPassword">
                    <wb-input v-model="firstPassword" type="password" :placeholder="$t('sys.Pleaseenterthepassword')" :maxlength="150" />
                </Form-item>
                <Form-item
                    v-if="actionType === 'add' || actionType === 'resetPassword'"
                    :label="$t('sys.Confirmpasswordagain')" prop="secondPassword">
                    <wb-input v-model="secondPassword" type="password" :placeholder="$t('sys.Pleaseenterthepasswordagain')" :maxlength="150" />
                </Form-item>
            </Wb-form>
        </weModal>
    </div>
</template>
<script type="text/ecmascript-6">
import weModal from '../../../components/uiTemplate/weModal';
import { debounce } from 'lodash';
export default {
    FesDataCache: 'user',
    FesHeader: false,
    components: {
        weModal
    },
    FesData() {
        const validatePassword = (rule, value, callback) => {
            if (this.firstPassword && value && this.firstPassword !== value) {
                callback(new Error(`${this.$t('sys.Passwordisnotcorrect')}，${this.$t('sys.Pleaseinputvalidationagain')}`));
            }
            callback();
        }
        return {
            query: {
                userName: ''
            },
            newUserData: {
                id: null,
                userName: '',
                userType: null
            },
            firstPassword: '',
            secondPassword: '',
            ruleAdd: {
                userName: [
                    {required: true, message: this.$t('sys.user.YHXXBNWK')},
                    {
                        type: 'string',
                        pattern: /^[a-zA-Z][a-zA-Z0-9_]*$/,
                        message: `${this.$t('sys.Musthavealetter')}，${this.$t('sys.Andonlysupportletter')}、${this.$t('sys.digital')}、${this.$t('sys.Theunderline')}`,
                        trigger: 'change'
                    },
                    {message: `${this.$t('sys.Namecannotbemorethanlength')}200`, max: 200}
                ],
                firstPassword: [
                    // {required: true, message: $t('sys.Pleaseentertheinitialpassword')}
                    {message: `${this.$t('sys.Passwordlengthcantmorethan')}20`, max: 20}
                ],
                secondPassword: [
                    // {required: true, message: $t('sys.Confirmpasswordagain')},
                    {validator: validatePassword, trigger: 'blur'},
                    {message: `${this.$t('sys.Passwordlengthcantmorethan')}20`, max: 20}
                ]
            },
            data: [],
            pagination: {
                size: 10,
                current: 1,
                total: 0
            },
            modalShow: false,
            modalTitle: this.$t('sys.user.XZYH'),
            actionType: 'add',
            userTypeComponent: (trData, tdData) => {
                const that = this;
                return new Vue({
                    data() {
                        return {
                            trData: trData
                        }
                    },
                    methods: {
                        typeName(type) {
                            if (type === 0) {
                                return that.$root.$t('sys.user.PTYH')
                            } else if (type === 1) {
                                return that.$root.$t('sys.user.GLYH')
                            } else {
                                return that.$root.$t('sys.user.CJYH')
                            }
                        },
                        typeAction(type) {
                            if (type === 0) {
                                return 'info';
                            } else if (type === 1) {
                                return 'primary';
                            } else {
                                return 'warn';
                            }
                        }
                    },
                    template: `<Wb-button :type="typeAction(trData.userType)">{{typeName(trData.userType)}}</Wb-button>`
                })
            },
            userAction: [{
                text: this.$t('sys.user.BJ'),
                func: function (trData) {
                    this.FesApi.fetch('/admin/user/view/' + trData.id, 'get').then(rst => {
                        this.newUserData = rst;
                        this.modalShow = true;
                        this.actionType = 'modify'
                        this.modalTitle = this.$t('sys.user.XGYHXX');
                    })
                }
            },
            {
                text: this.$t('sys.Bindingauthorization'),
                func: function (trData) {
                    const user = encodeURIComponent(JSON.stringify(trData));
                    this.$router.push({path: '/sys/user/bind', query: {user}})
                }
            },
            {
                text: this.$t('sys.Toresetyourpassword'),
                func: function (trData) {
                    this.modalShow = true;
                    this.newUserData = trData;
                    this.firstPassword = '';
                    this.secondPassword = '';
                    this.actionType = 'resetPassword';
                    this.modalTitle = this.$t('sys.Toresetyourpassword');
                }
            },
            {
                text: this.$t('sys.user.SC'),
                func: function (trData) {
                    this.$Message.confirm(this.$t('sys.user.SCYH'), `${this.$t('sys.user.SFSCYH')}${trData.userName} ?`).then( (index) => {
                        if (index === 0) {
                            this.FesApi.fetch('/admin/user/delete/' + trData.id, 'delete').then(() => {
                                this.$Toast.success(this.$t('sys.user.SCCG'));
                                this.search();
                            })
                        }
                    });
                }
            }
            ]
        }
    },
    FesReady() {
        this.search();
    },
    methods: {
        changeSearch: debounce(function () {
            this.search();
        }, 800),
        showAdd() {
            this.newUserData = {
                userName: '',
                userType: 0
            };
            this.modalShow = true;
            this.actionType = 'add';
            this.firstPassword = '';
            this.secondPassword = '';
            this.modalTitle = this.$t('sys.user.XZYH');
        },
        addNodeConfirm() {
            let data = this.newUserData;
            let url = '';
            let notice = '';
            let config = {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json'
                }
            }
            if (this.actionType === 'add') {
                data.password = this.secondPassword;
                url = '/admin/user/add';
                notice = this.$t('sys.user.TJYHCG');
            } else if (this.actionType === 'modify') {
                url = '/admin/user/update/' + data.id;
                notice = this.$t('sys.user.XGCG');
            } else {
                url = `/admin/user/${this.newUserData.id}/password/reset`;
                notice = this.$t('sys.Passwordresetsuccessfully');
                config.method = 'put';
                // data.password = this.secondPassword
                data = {
                    password: this.secondPassword
                }
            }
            this.$refs.addForm.validate(valid =>{
                if (valid) {
                    this.FesApi.fetch(url, data, config).then( () => {
                        this.$Toast.success(notice);
                        this.newUserData = {};
                        this.search();
                    });
                } else {
                    this.modalShow = true;
                }
            });

        },
        search(current = 1, size = 10) {
            this.loading = true;
            this.data = [];
            // this.pagination.total = 0;
            this.FesApi.fetch('/admin/user/selectAll', {
                'userName': this.query.userName,
                'page': current,
                'pageSize': size
            }, 'get').then((data) => {
                this.data = data;
                // this.pagination.total = data.totalPages;
                this.pagination.current = current;
                this.pagination.size = size;
                this.loading = false;
            });
        },
        changePage({ current, size}) {
            this.search(current, size);
        }
    }
}
</script>
<style>
.submit-button-container {
    text-align: center;
}
</style>
