<template>
    <main class="main full-height">
        <div class="header-bar">
            <span class="header-title">
                {{ $t('sys.Usermanagement') }}
            </span>
            <p class="header-des">
                {{ $t('sys.Performuserandexecutionnodebindingauthority') }}
            </p>
        </div>
        <div class="main-content">
            <Tabs v-model="tabValue">
                <Tab :label="$t('sys.Theexecutionnode')" name="node" icon="iconfont icon-jiedian">
                    <div class="template-lsit">
                        <div class="add-item template-item" @click="addNode">
                            <Icon type="md-add" size="16" />
                            {{ $t('sys.Addanode') }}
                        </div>
                        <div v-for="(item, index) in execoteNodeList" :key="index" class="current-item template-item">
                            <div class="item-content">
                                <div class="icon-box">
                                    <Icon class="icon-bar" type="iconfont icon-jiedian" size="35" />
                                    <span class="template-type" :title="item.sourceType">
                                    Node
                                    </span>
                                </div>
                                <div class="content">
                                    <div class="params" :title="item.address">
                                        <span class="label">
                                        {{ $t('sys.Address:') }}
                                        </span>
                                        {{ item.address }}
                                    </div>
                                    <div class="params" :title="item.id">
                                        <span class="label">
                                        ID：
                                        </span>
                                        {{ item.id }}
                                    </div>
                                    <div class="params">
                                        <span class="label">
                                        {{ $t('sys.Status:') }}
                                        </span>
                                        {{ item.status == 0 ? $t('sys.normal') : $t('sys.offline') }}
                                    </div>
                                    <div class="params">
                                        <span class="label">
                                        cup：
                                        </span>
                                        {{ item.cpuRate }}
                                    </div>
                                    <div class="params">
                                        <span class="label">
                                        {{ $t('sys.Memory:') }}
                                        </span>
                                        {{ item.memRate }}
                                    </div>
                                </div>
                            </div>
                            <div class="item-option">
                                <span class="modify" @click="deleteNodeAction(item)">
                                    {{ $t('dataTemplate.SC') }}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="page-pagination">
                        <Pagination :loking="nodePagination.locking" :current="nodePagination.current"
                                    :size="nodePagination.size" :total="nodePagination.total" @on-change="nodePageChange" />
                    </div>
                </Tab>
                <Tab :label="$t('sys.Performuser')" name="user" icon="iconfont icon-yonghu">
                    <div class="template-lsit">
                        <div class="add-item template-item" @click="addUser">
                            <Icon type="md-add" size="16" />
                            {{ $t('sys.Adduser') }}
                        </div>
                        <div v-for="(item, index) in execoteUserList" :key="index" class="current-item template-item">
                            <div class="item-content">
                                <div class="icon-box">
                                    <Icon class="icon-bar" type="iconfont icon-yonghu" size="35" />
                                    <span class="template-type" :title="item.sourceType">
                                    E-User
                                    </span>
                                </div>
                                <div class="content">
                                    <div class="params" :title="item.name">
                                        <span class="label">
                                        {{ $t('sys.Name:') }}
                                        </span>
                                        {{ item.execUser }}
                                    </div>
                                    <div class="params" :title="item.dec">
                                        <span class="label">
                                        ID：
                                        </span>
                                        {{ item.id }}
                                    </div>
                                </div>
                            </div>
                            <div class="item-option">
                                <span class="modify" @click="deleteUserAction(item)">
                                    {{ $t('dataTemplate.SC') }}
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="page-pagination">
                        <Pagination :loking="userPagination.locking" :current="userPagination.current"
                                    :size="userPagination.size" :total="userPagination.total" @on-change="userPageChange" />
                    </div>
                </Tab>
                <Wb-button slot="action" type="ghost" @click="goback">
                {{ $t('sys.return') }}
                </Wb-button>
            </Tabs>
        </div>
        <weModal v-model="addNodeShow" :title="$t('sys.Bindingnodes')" width="500" :closable="false" @onConfirm="addNodeConfirm">
            <Wb-form>
                <Form-item :label="$t('sys.Selectthenode')">
                    <Wb-select v-model="selectBindNode" filterable>
                        <wb-option v-for="item in selectNodeList" :key="item.id" :value="item.id" :label="item.address" />
                    </Wb-select>
                </Form-item>
            </Wb-form>
        </weModal>
        <weModal v-model="addUserShow" :title="$t('sys.Bindtheuser')" width="500" :closable="false" @onConfirm="addUserConfirm">
            <Wb-form>
                <Form-item :label="$t('sys.Selecttheuser')">
                    <Wb-select v-model="selectBindUser" filterable>
                        <wb-option v-for="item in selectUserList" :key="item.id" :value="item.id" :label="item.execUser" />
                    </Wb-select>
                </Form-item>
            </Wb-form>
        </weModal>
        <weLoading v-show="FesFesx.isLoading" />
    </main>
</template>
<script>
import weModal from '../../../../components/uiTemplate/weModal';
import weLoading from '../../../../components/uiTemplate/weLoading.fes';
export default {
    components: {
        weModal,
        weLoading
    },
    data() {
        return {
            tabValue: 'node',
            execoteNodeList: [],
            execoteUserList: [],
            selectBindNode: '',
            selectBindUser: '',
            selectNodeList: [],
            selectUserList: [],
            addNodeShow: false,
            addUserShow: false,
            nodePagination: {
                size: 11,
                current: 1,
                total: 10
            },
            userPagination: {
                size: 11,
                current: 1,
                total: 10
            },
            userData: JSON.parse(decodeURIComponent(this.$route.query.user))
        }
    },
    mounted() {
        // $t('sys.Gettheexecutionnodecanchoose')
        this.getSelectNodeList();
        this.getSelectUserList();
        this.nodeSearchQuery();
        this.userSearchQuery()
    },
    methods: {
        addNode() {
            this.addNodeShow = true;
        },
        addUser() {
            this.addUserShow = true;
        },
        nodeSearchQuery(turn = 1, size = 11) {
            this.FesFesx.set('isLoading', true);
            this.FesApi.fetch(`/admin/user/${this.userData.id}/exec/node/bind/pager`, {
                'page': turn,
                'pageSize': size
            }, 'get').then((data) => {
                this.FesFesx.set('isLoading', false);
                this.execoteNodeList = data.data;
                this.nodePagination.size = data.pageSize;
                this.nodePagination.current = data.page;
                this.nodePagination.total = data.totalPages;
            }).catch(() => {
                this.FesFesx.set('isLoading', false);
            });
        },
        userSearchQuery(turn = 1, size = 11) {
            this.FesFesx.set('isLoading', true);
            this.FesApi.fetch(`/admin/user/${this.userData.id}/exec/user/bind/pager`, {
                'page': turn,
                'pageSize': size
            }, 'get').then((data) => {
                this.FesFesx.set('isLoading', false);
                this.execoteUserList = data.data;
                this.userPagination.size = data.pageSize;
                this.userPagination.current = data.page;
                this.userPagination.total = data.totalPages;
            }).catch(() => {
                this.FesFesx.set('isLoading', false);
            });
        },
        nodePageChange({ current, size }) {
            this.nodeSearchQuery(current, size)
        },
        userPageChange({ current, size }) {
            this.userSearchQuery(current, size)
        },
        addNodeConfirm() {
            // $t('sys.Afterthecalltoaddinterface')，$t('sys.Pullthedataagain')
            this.FesApi.fetch(`/admin/user/${this.userData.id}/exec/node/${this.selectBindNode}/bind`, {}, 'post').then(() => {
                this.$Toast.success(this.$t('sys.Boundnodesuccess'))
                this.nodeSearchQuery(this.nodePagination.current, this.nodePagination.size)
            })
        },
        addUserConfirm() {
            // $t('sys.Callstoadduserinterface')
            this.FesApi.fetch(`/admin/user/${this.userData.id}/exec/user/${this.selectBindUser}/bind`, {}, 'post').then(() => {
                this.$Toast.success(this.$t('sys.Bindingusersuccessfully'))
                this.userSearchQuery(this.userPagination.current, this.userPagination.size)
            })
        },
        deleteNodeAction(item) {
            this.$Message.confirm(this.$t('sys.Removenodes'), `${this.$t('sys.Confirmtodeletetheexecutionnode')}${item.address}?`).then((index) => {
                if (index === 0) {
                    this.FesApi.fetch(`/admin/user/${this.userData.id}/exec/node/${item.id}/bind`, {}, 'delete').then(() => {
                        this.$Toast.success(this.$t('sys.Deletenodesuccess'))
                        this.nodeSearchQuery(this.nodePagination.current, this.nodePagination.size)
                    })
                }
            })
        },
        deleteUserAction(item) {
            this.$Message.confirm(this.$t('sys.Deleteuser'), `${this.$t('sys.Confirmtodeletetheuserexecution')}${item.execUser}?`).then((index) => {
                if (index === 0) {
                    this.FesApi.fetch(`/admin/user/${this.userData.id}/exec/user/${item.id}/bind`, {}, 'delete').then(() => {
                        this.$Toast.success(this.$t('sys.Deletetheusersuccessfully'))
                        this.userSearchQuery(this.userPagination.current, this.userPagination.size)
                    })
                }
            })
        },
        goback() {
            this.$router.go(-1);
        },
        getSelectNodeList() {
            this.FesApi.fetch('/admin/exec/node/selectAll', {}, 'get').then((res) => {
                this.selectNodeList = res;
            })
        },
        getSelectUserList() {
            this.FesApi.fetch('/admin/exec/user/list ', {}, 'get').then((res) => {
                this.selectUserList = res;
            })
        }
    }
}
</script>

<style scoped lang="scss">
    .main {
        background-color: #f7f7f7;
        min-height: 100%;
        .header-bar {
            height: 95px;
            padding: 0 30px;
            font-size: 18px;
            background-color: #fff;
            box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items:flex-start;
            .header-title {
                color: black;
            }
            .header-des {
                font-size: 14px;
                padding-top: 15px;
            }
        }
        .main-content {
            width: 97%;
            margin: 0 auto;
            background-color: #fff;
            margin-top: 25px;
            padding: 20px 25px 0 25px;
            border-radius: 10px;
            box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.2);
            // overflow: hidden;
            min-height: 80%;
            position: relative;
            .top-bar {
                padding: 25px 25px;
                border: 1px solid #e8e8e8;
                display: -webkit-flex;
                justify-content: flex-start;
                align-items: center;
                .margin-left {
                    margin-left:40px;
                }
            }
            .template-lsit {
                padding: 25px 30px 50px 30px;
                display: flex;
                justify-content: flex-start;
                align-items: center;
                flex-wrap: wrap;
                .template-item {
                    width: 23.5%;
                    height: 185px;
                    border-radius: 8px;
                    margin-right: 2%;
                    margin-bottom: 2%;
                    border: 1px solid #e8e8e8;
                    transition: transform .15s linear,box-shadow .2s linear;
                    &:hover {
                        box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.2);
                        transform: translateY(-3px)
                    }
                    &:nth-child(4n) {
                        margin-right: 0px;
                    }
                }
                .current-item {
                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;
                    align-items: center;
                    overflow: hidden;
                    .item-content {
                        width: 100%;
                        flex: 1;
                        display: flex;
                        justify-content: center;
                        align-items: flex-start;
                        padding: 20px;
                        .icon-box {
                            flex-basis: 60px;
                            .icon-bar {
                                width: 100%;
                                color: rgba(0, 0, 0, 0.5);
                                border-radius: 50%;
                                background-color: #e8e8e8;
                                line-height: 60px;
                                text-align: center;
                                &::before {
                                    font-size: 40px;
                                }
                            }
                            .template-type {
                                display: block;
                                font-size: 14px;
                                text-align: center;
                                margin-top: 10px;
                                max-width: 60px;
                                overflow: hidden;
                                white-space: nowrap;
                                text-overflow: ellipsis;
                                font-weight: 600;
                            }
                        }
                        .content {
                            flex: 1;
                            margin-left: 20px;
                            position: relative;
                            height: 100%;
                            overflow: hidden;
                            .name {
                                font-size: 15px;
                                color: rgba(0, 0, 0, 0.8);
                                max-width: 100%;
                                display: block;
                                overflow: hidden;
                                white-space: nowrap;
                                text-overflow: ellipsis;
                            }
                            .params {
                                max-width: 100%;
                                display: block;
                                overflow: hidden;
                                white-space: nowrap;
                                text-overflow: ellipsis;
                                font-size: 14px;
                                line-height: 20px;
                                .label {
                                    font-weight: 600;
                                }
                            }
                            .content-footer {
                                position:absolute;
                                left: 0;
                                bottom: 0;
                                width: 100%;
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                            }
                        }
                    }
                    .item-option {
                        flex-basis: 46px;
                        background-color: rgb(250, 250, 250);
                        width: 100%;
                        box-sizing: border-box;
                        padding: 10px 0;
                        display: flex;
                        justify-content: space-around;
                        align-items: center;
                        font-size: 14px;
                        color: rgba(0, 0, 0, 0.45);
                        border-top: 1px solid #e8e8e8;
                        .delete, .modify, .detail {
                            cursor: pointer;
                            flex: 1;
                            text-align: center;
                        }
                    }
                }
                .add-item {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    font-size: 14px;
                    cursor: pointer;
                }
            }
            .page-pagination {
                position: absolute;
                left: 50%;
                bottom: 20px;
                z-index: 10px;
                transform: translateX(-50%);
            }
        }
        .modal-select {
            width: 85%;
        }
        .parameter-item {
            margin-bottom: 10px;
        }
    }
</style>