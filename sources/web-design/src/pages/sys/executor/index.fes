<template>
    <div class="full-height">
        <fes-search-panel>
            <Wb-form type="query" :label-width="150">
                <Form-item :label="$t('sys.executor.DZ')">
                    <wb-input v-model="query.address" :placeholder="$t('sys.executor.QSR')" @on-enter="search()" />
                </Form-item>
            </Wb-form>
            <div slot="button">
                <Wb-button type="primary" icon="search" @click="search()">
                {{ $t('sys.executor.CX') }}
                </Wb-button>
            </div>
        </fes-search-panel>
        <fes-list-panel>
            <Wb-table :data="data" :no-data-text="$t('sys.executor.ZWSJ')">
                <Column prop="id" name="ID" />
                <Column prop="address" :name="$t('sys.executor.DZ')" />
                <Column prop="defaultNode" :name="$t('sys.Thedefaultnode')" :component="checkboxCompenentData" />
                <Column prop="tabIds" :name="$t('sys.Thelabel')" :component="tabComponentData" width="200px" />
                <Column prop="heartbeatTime" :name="$t('sys.executor.XTSJ')" />
                <Column prop="status" :component="showStatus" :name="$t('sys.executor.ZT')" />
                <Column prop="memRate" :name="$t('sys.executor.NCSYL')" />
                <Column prop="cpuRate" :name="$t('sys.executor.SYL')" />
                <Column :name="$t('sys.executor.CZ')" :action="exeAction" />
            </Wb-table>
            <Pagination class="page-center" :loking="pagination.locking" :current="pagination.current" :size="pagination.size" :total="pagination.total" @on-change="changePage" />
        </fes-list-panel>
        <weModal v-model="bindlabelShow" :title="$t('sys.Bindingthenodelabel')" :closable="false" @onConfirm="addConfirm">
            <Wb-form ref="source_validate" label-position="left">
                <Form-item :label="$t('sys.Thelabel')" prop="executeDes">
                    <Wb-select v-model="tabIds" :placeholder="$t('sys.Pleaseselectalabel')" multiple>
                        <wb-option v-for="tab in tabList" :key="tab.id" :value="tab.id" :label="tab.name" />
                    </Wb-select>
                </Form-item>
            </Wb-form>
        </weModal>
    </div>
</template>
<script>
import weModal from '../../../components/uiTemplate/weModal.fes';
export default {
    FesDataCache: 'executor',
    FesHeader: false,
    components: {
        weModal
    },
    data() {
        return {
            query: {
                address: ''
            },
            data: [],
            pagination: {
                size: 10,
                current: 1,
                total: 0
            },
            bindlabelShow: false,
            tabIds: [],
            tabList: [],
            currentNode: {},
            exeAction: [{
                text: this.$t('sys.executor.WH'),
                func: function (trData) {
                    let action = ''
                    if (trData.status == 0) {
                        action = this.$t('sys.executor.XX')
                    } else {
                        action = this.$t('sys.executor.SX')
                    }
                    this.$Message.confirm(action + this.$t('sys.executor.JD'), this.$t('sys.executor.SFCG', {action: action})).then( (index) => {
                        if (index === 0) {
                            if (trData.status == 0) {
                                trData.status = 1;
                            } else {
                                trData.status = 0;
                            }
                            this.FesApi.fetch('/admin/exec/node/update/' + trData.id, trData).then(() => {
                                this.$Toast.success(action + ' ' + this.$t('sys.executor.JDCG'));
                                this.search();
                            })
                        }
                    });
                }
            },
            {
                text: this.$t('sys.Themanagementnode'),
                func: function (trData) {
                    const value = encodeURIComponent(JSON.stringify(trData));
                    this.$router.push({path: '/sys/executor/bind',
                        query: {
                            value
                        }
                    })
                }
            },
            {
                text: this.$t('sys.Thelabel'),
                func: function (trData) {
                    this.currentNode = trData;
                    this.tabIds = trData.tabIds ? JSON.parse(JSON.stringify(trData.tabIds)) : [];
                    this.bindlabelShow = true;
                }
            },
            {
                text: this.$t('sys.delete'),
                func: function (trData) {
                    this.$Message.confirm(this.$t('sys.Removenodes'), `${this.$t('sys.Whetherornottodelete')}${trData.address}`).then( (index) => {
                        if (index === 0) {
                            this.FesApi.fetch('/admin/exec/node/delete/' + trData.id, {}, 'delete').then(() => {
                                this.$Toast.success(this.$t('sys.Deletethesuccess'));
                                this.search();
                            })
                        }
                    });
                }
            }],
            showStatus: this.showStatusFunction,
            tabComponentData: this.tabComponent,
            checkboxCompenentData: this.checkboxCompenent
        }
    },
    FesReady() {
        this.search();
        this.FesApi.fetch(`/tab/list`, {}, 'get').then((res) => {
            this.tabList = res;
        })
    },
    methods: {
        addConfirm() {
            this.FesApi.fetch(`/admin/exec/node/${this.currentNode.id}/tab`, {tabIds: this.tabIds}).then((res) => {
                this.search();
            })
        },
        checkboxCompenent(trData) {
            const that = this;
            return new Vue({
                data() {
                    return {
                        trData
                    }
                },
                methods: {
                    checkDefault(e) {
                        if (e) {
                            that.FesApi.fetch(`/admin/exec/node/${this.trData.id}/default`, {}, 'post').then(() => {
                                // $t('sys.Updatethelist')
                                that.search()
                            })
                        } else {
                            that.FesApi.fetch(`/admin/exec/node/${this.trData.id}/default`, {}, 'delete').then(() => {
                                // $t('sys.Updatethelist')
                                that.search()
                            })
                        }
                    }
                },
                template: `<Checkbox v-model="trData.default" @on-change="checkDefault"></Checkbox>`
            })
        },
        tabComponent(trData) {
            return new Vue({
                data() {
                    return {
                        tabIds: trData.tabIds || []
                    }
                },
                template: `<div><Wb-button style="margin-right: 10px;padding:3px 6px;" v-for="(tab, index) in tabIds" :key="index" type="defalut"> {{tab === 1 ? 'DATAX' : 'SQOOP' }}</Wb-button></div>`
            })
        },
        showStatusFunction(trData) {
            let a = '';
            let cla = '';
            if (trData.status == 0) {
                a = this.$t('sys.executor.ZC');
                cla = 'blue'
            } else {
                a = this.$t('sys.executor.YXX');
                cla = 'red'
            }
            return new Vue({template: "<p style='color:" + cla + "'>" + a + '</p>'});
        },
        search(current = 1, size = 10) {
            this.loading = true;
            this.data = [];
            this.pagination.total = 0;
            this.FesApi.fetch('/admin/exec/node/pageList', {
                'address': this.query.address,
                'page': current,
                'pageSize': size
            }, 'get').then((data) => {
                this.data = data.data;
                this.pagination.total = data.totalPages;
                this.pagination.current = current;
                this.pagination.size = size;
                this.loading = false;
            });
        },
        changePage({ current, size}) {
            this.search(current, size);
        }
    }
}
</script>