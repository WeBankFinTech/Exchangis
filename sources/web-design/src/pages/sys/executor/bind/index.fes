<template>
    <main class="bind-main full-height">
        <div class="header-bar">
            <span class="header-title">
                {{ $t('sys.Nodemanagement') }}
            </span>
            <div class="header-content">
                <div class="content-item">
                    <span>{{ $t('sys.state') }}</span>
                    <span class="button">
                    <i class="status-bar" :class="{'green': executorNodeData.status === 0,'orange': executorNodeData.status === 1}" />
                    {{ executorNodeData.status === 0 ? $t('sys.normal') : $t('sys.Hasbeenrolledofftheproductionline') }}
                    </span>
                </div>
                <div class="content-item">
                    <span>{{ $t('sys.Thenodeaddress') }}</span>
                    <span class="button">
                    {{ executorNodeData.address }}
                    </span>
                </div>
                <div class="content-item">
                    <span>{{ $t('sys.Theheartbeatoftime') }}</span>
                    <span class="button">
                    {{ executorNodeData.heartbeatTime }}
                    </span>
                </div>
                <div class="content-item">
                    <span>{{ $t('sys.Memoryusage') }}</span>
                    <span class="button">
                    {{ executorNodeData.memRate }}
                    </span>
                </div>
                <div class="content-item">
                    <span>cpu {{ $t('sys.usage') }}</span>
                    <span class="button">
                    {{ executorNodeData.cpuRate }}
                    </span>
                </div>
            </div>
        </div>
        <div class="main-content">
            <Row class="top-bar">
                <Cell span="2">
                    <label class="ui-form-label float-right">
                    {{ $t('sys.Performausername') }}
                    </label>
                </Cell>
                <Cell span="3">
                    <Wb-input v-model="searchUserName" :placeholder="$t('sys.Pleaseenteryourusername')" />
                </Cell>
                <div class="margin-left">
                    <label class="ui-form-label">
                    UID
                    </label>
                </div>
                <Cell span="3">
                    <Wb-input v-model="searchUID" :placeholder="`${$t('sys.Pleaseenterthe')} UID`" />
                </Cell>
                <div class="margin-left">
                    <label class="ui-form-label">
                    GID
                    </label>
                </div>
                <Cell span="3">
                     <Wb-input v-model="searchGID" :placeholder="`${$t('sys.Pleaseenterthe')} GID`" />
                </Cell>
                <Cell span="5" class="margin-left">
                    <Wb-button type="primary" icon="search" @click="searchQuery()">
                    {{ $t('manager.CX') }}
                    </Wb-button>
                    <Wb-button class="margin-left" type="primary" icon="plus" @click="addExecuteUser">
                   {{ $t('sys.add') }}
                    </Wb-button>
                </Cell>
                <Cell span="4" class="margin-left">
                    <Wb-button @click="goback">
                    {{ $t('sys.return') }}
                    </Wb-button>
                </Cell>
            </Row>

            <Wb-table :data="execoteUserList" :no-data-text="$t('sys.Temporarilynodata')">
                <Column prop="execUser" :name="$t('sys.Performausername')" />
                <Column prop="userType" :name="$t('sys.Associatedwiththeusertypes')" />
                <Column :component="statusComponent" :name="$t('sys.Associatedstates')" />
                <Column prop="uid" name="UID" />
                <Column prop="gid" name="GID" />
                <Column prop="updateTime" :name="$t('sys.Therecentmodificationtime')" />
                <Column :component="optionComponent" :name="$t('sys.operation')" width="300px" />
            </Wb-table>
            <div class="page-pagination">
                <Pagination class="pagination" :loking="pagination.locking" :current="pagination.current" :size="pagination.size" :total="pagination.total" @on-change="changePage" />
            </div>
        </div>
        <weModal v-model="addUserShow" :title="$t('sys.Bindtheuser')" width="500" :closable="false" @onConfirm="addUserConfirm">
            <Wb-form ref="bindFrom" :rule="addBindRule">
                <Form-item :label="$t('sys.Selecttheuser')" prop="selectBindUser">
                    <Wb-select v-model="selectBindUser" multiple filterable>
                        <wb-option v-for="item in selectUserList" :key="item.id" :value="item.id" :label="item.execUser" />
                    </Wb-select>
                </Form-item>
                <Form-item :label="$t('sys.Bindingtype')" prop="selectBindType">
                    <Wb-select v-model="selectBindType">
                        <wb-option v-for="item in selectBindTypeList" :key="item.value" :value="item.value" :label="item.label" />
                    </Wb-select>
                </Form-item>
            </Wb-form>
        </weModal>
        <weLoading v-show="FesFesx.isLoading" />
    </main>
</template>
<script>
import weModal from '../../../../components/uiTemplate/weModal';
import weLoading from '../../../../components/uiTemplate/weLoading.fes';
export default {
    components: {
        weModal,
        weLoading
    },
    data() {
        let that = this;
        return {
            executorNodeData: JSON.parse(decodeURIComponent(this.$route.query.value)),
            tabValue: 'node',
            selectBindNode: [],
            selectBindUser: [],
            selectUserList: [],
            addExecuteUserShow: false,
            addUserShow: false,
            pagination: {
                size: 10,
                current: 1,
                total: 10
            },
            addBindRule: {
                selectBindUser: [
                    {required: true, message: this.$t('sys.Pleasefillinusername')}
                ],
                selectBindType: [
                    {required: true, message: this.$t('sys.Pleaseselectabindingtype')}
                ]
            },
            optionComponent(trData) {
                return new Vue({
                    data() {
                        return {
                            trData: trData
                        }
                    },
                    methods: {
                        deleteAction(data) {
                            if (data.relationState === 1) {
                                return that.$Toast.warn(`${that.$t('sys.Hasbeenassociateduser')}，${that.$t('sys.Donotdelete')}！`);
                            } else {
                                this.$Message.confirm(that.$t('sys.delete'), `${that.$t('sys.Confirmtodeletetheuserexecution')}${data.execUser}?`).then((index) => {
                                    if (index === 0) {
                                        that.FesApi.fetch(`/admin/exec/node/${that.executorNodeData.id}/user/${data.execUser}/bind`, {}, 'DELETE').then(() => {
                                            that.searchQuery(that.pagination.current, that.pagination.size);
                                            this.$Toast.success(that.$t('sys.Deletetheusersuccessfully'));
                                        })
                                    }
                                })
                            }
                        },
                        associated(data) {
                            this.$Message.confirm(that.$t('sys.associated'), `${that.$t('sys.confirm')}${that.executorNodeData.address}${that.$t('sys.Executionofuser')}${data.execUser}？`).then((index) => {
                                if (index === 0) {
                                    that.FesApi.fetch(`/admin/exec/node/${that.executorNodeData.id}/user/${data.execUser}/relate`, {}, 'PUT').then(() => {
                                        that.searchQuery(that.pagination.current, that.pagination.size);
                                    })
                                }
                            })
                        },
                        cancelAssociated(data) {
                            this.$Message.confirm(that.$t('sys.Canceltheassociated'), `${that.$t('sys.confirm')}${that.executorNodeData.address}${that.$t('sys.Canceltheexecutionoftheuser')}${data.execUser}？`).then((index) => {
                                if (index === 0) {
                                    that.FesApi.fetch(`/admin/exec/node/${that.executorNodeData.id}/user/${data.execUser}/relate`, {}, 'DELETE').then(() => {
                                        that.searchQuery(that.pagination.current, that.pagination.size);
                                    })
                                }
                            })
                        }
                    },
                    template:
                            `<div>
                                <span v-if="trData.relationState === 0 || trData.relationState === 2"  class="component-button" @click="associated(trData)" style="{
                                    cursor: pointer;
                                    padding: 0 5px;
                                    color: #3399ff;
                                    border-right: 1px solid #e3e8ee;
                                }">${ that.$t('sys.associated') }</span>
                                <span class="component-button" v-if="trData.relationState === 1" @click="cancelAssociated(trData)"
                                style="{
                                    cursor: pointer;
                                    padding: 0 5px;
                                    color: #3399ff;
                                    border-right: 1px solid #e3e8ee;
                                }">
                                    ${that.$t('sys.Canceltheassociated')}
                                </span>
                                <span class="component-button last-button" @click="deleteAction(trData)"
                                style="{
                                    cursor: pointer;
                                    padding: 0 5px;
                                    color: #3399ff;
                                }">
                                    ${that.$t('sys.delete')}
                                </span>
                            </div>`
                })
            },
            statusComponent(trData) {
                return new Vue({
                    data() {
                        return {
                            trData
                        }
                    },
                    methods: {

                    },
                    template:
                            `<div>
                                <span v-if="trData.relationState === 0" class="orange" style="color: rgb(255, 104, 1);">
                                    ${that.$t('sys.Notassociated')}
                                </span>
                                <span v-if="trData.relationState === 1"  class="blue" style="color: rgb(51, 153, 255);">
                                    ${that.$t('sys.Hasbeenassociated')}
                                </span>
                                <span v-if="trData.relationState === 2"  class="red" style="color: rgb(255, 0, 0);">
                                    ${that.$t('sys.Connectionfailure')}
                                </span>
                            </div>`
                })
            },
            searchUserName: '',
            searchUID: '',
            searchGID: '',
            execoteUserList: [],
            selectBindType: '',
            selectBindTypeList: [
                {
                    label: this.$t('sys.Thebinding'),
                    value: 'BIND'
                },
                {
                    label: this.$t('sys.bindings'),
                    value: 'BIND_RELATE'
                }
            ]
        }
    },
    FesReady() {
        this.searchQuery();
        this.getSelectUserList();
    },
    methods: {
        getSelectUserList() {
            this.FesApi.fetch('/admin/exec/user/list ', {}, 'get').then((res) => {
                this.FesFesx.set('isLoading', false);
                this.selectUserList = res
            }).catch(()=> {
                this.FesFesx.set('isLoading', false);
            })
        },
        addExecuteUser() {
            this.addUserShow = true;
            this.selectBindUser = [];
            this.selectBindType = '';
        },
        searchQuery(turn = 1, size = 10) {
            this.FesFesx.set('isLoading', true);
            this.FesApi.fetch(`/admin/exec/node/${this.executorNodeData.id}/user/bind/pager`, {
                'uid': this.searchUID,
                'gid': this.searchGID,
                'execUser': this.searchUserName,
                'page': turn,
                'pageSize': size
            }, 'get').then((data) => {
                this.FesFesx.set('isLoading', false);
                this.execoteUserList = data.data;
                this.pagination.size = data.pageSize;
                this.pagination.current = data.page;
                this.pagination.total = data.totalPages;
            }).catch(() => {
                this.FesFesx.set('isLoading', false);
            });
        },
        changePage({ current, size }) {
            this.searchQuery(current, size)
        },
        addUserConfirm() {
            this.$refs.bindFrom.validate((valid) => {
                if (valid) {
                    const params = {
                        opType: this.selectBindType,
                        execUserList: this.selectUserList.filter((item) => this.selectBindUser.includes(item.id))
                    }
                    this.FesApi.fetch(`/admin/exec/node/${this.executorNodeData.id}/user/bind`, params, {
                        method: 'post',
                        timeout: '60000'
                    }).then(() => {
                        this.searchQuery(this.pagination.current, this.pagination.size);
                        this.$Toast.success(this.$t('sys.Addausersuccessfully'));
                    }).catch(() => {
                        this.searchQuery(this.pagination.current, this.pagination.size);
                    })
                } else {
                    this.addUserShow = true;
                }
            })
        },
        goback() {
            this.$router.go(-1);
        }
    }
}
</script>

<style lang="scss" scoped>
    .bind-main {
        background-color: #f7f7f7;
        min-height: 100%;
        .header-bar {
            height: 95px;
            padding: 0 30px;
            font-size: 16px;
            background-color: #fff;
            box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items:flex-start;
            .header-title {
                color: black;
            }
            .header-content {
                font-size: 14px;
                padding: 0 15px;
                display: flex;
                align-items: center;
                justify-content: flex-start;
                .content-item {
                    padding: 0 25px;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-content: center;
                    text-align: center;
                    .button {
                        font-weight: 600;
                        margin-top: 5px;
                    }
                    .status-bar {
                        display: inline-block;
                        width: 10px;
                        height: 10px;
                        border-radius: 10px;

                    }
                    .green {
                        background-color: rgb(0, 255, 51);
                    }
                    .orange {
                        background-color: rgb(255, 104, 1);
                    }
                }
            }
        }
        .main-content {
            width: 97%;
            margin: 0 auto;
            background-color: #fff;
            margin-top: 25px;
            border-radius: 10px;
            box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.2);
            // overflow: hidden;
            min-height: 80%;
            position: relative;
            .top-bar {
                padding: 25px 25px;
                border: 1px solid #e8e8e8;
                display: -webkit-flex;
                justify-content: flex-start;
                align-items: center;
                .margin-left {
                    margin-left:40px;
                }
                .float-right {
                    float: right;
                }
            }
            .template-lsit {
                padding: 25px 30px 50px 30px;
                display: flex;
                justify-content: flex-start;
                align-items: center;
                flex-wrap: wrap;
                .template-item {
                    width: 23.5%;
                    height: 185px;
                    border-radius: 8px;
                    margin-right: 2%;
                    margin-bottom: 2%;
                    border: 1px solid #e8e8e8;
                    transition: transform .15s linear,box-shadow .2s linear;
                    &:hover {
                        box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.2);
                        transform: translateY(-3px)
                    }
                    &:nth-child(4n) {
                        margin-right: 0px;
                    }
                }
                .current-item {
                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;
                    align-items: center;
                    overflow: hidden;
                    .item-content {
                        width: 100%;
                        flex: 1;
                        display: flex;
                        justify-content: center;
                        align-items: flex-start;
                        padding: 20px;
                        .icon-box {
                            flex-basis: 60px;
                            .icon-bar {
                                width: 100%;
                                color: rgba(0, 0, 0, 0.5);
                                border-radius: 50%;
                                background-color: #e8e8e8;
                                &::before {
                                    font-size: 40px;
                                }
                            }
                            .template-type {
                                display: block;
                                font-size: 14px;
                                text-align: center;
                                margin-top: 10px;
                                max-width: 60px;
                                overflow: hidden;
                                white-space: nowrap;
                                text-overflow: ellipsis;
                                font-weight: 600;
                            }
                        }
                        .content {
                            flex: 1;
                            margin-left: 20px;
                            position: relative;
                            height: 100%;
                            overflow: hidden;
                            .name {
                                font-size: 15px;
                                color: rgba(0, 0, 0, 0.8);
                                max-width: 100%;
                                display: block;
                                overflow: hidden;
                                white-space: nowrap;
                                text-overflow: ellipsis;
                            }
                            .params {
                                max-width: 100%;
                                display: block;
                                overflow: hidden;
                                white-space: nowrap;
                                text-overflow: ellipsis;
                                font-size: 14px;
                                line-height: 20px;
                                .label {
                                    font-weight: 600;
                                }
                            }
                            .content-footer {
                                position:absolute;
                                left: 0;
                                bottom: 0;
                                width: 100%;
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                            }
                        }
                    }
                    .item-option {
                        flex-basis: 46px;
                        background-color: rgb(250, 250, 250);
                        width: 100%;
                        box-sizing: border-box;
                        padding: 10px 0;
                        display: flex;
                        justify-content: space-around;
                        align-items: center;
                        font-size: 14px;
                        color: rgba(0, 0, 0, 0.45);
                        border-top: 1px solid #e8e8e8;
                        .delete, .modify, .detail {
                            cursor: pointer;
                            flex: 1;
                            text-align: center;
                        }
                    }
                }
                .add-item {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    font-size: 14px;
                    cursor: pointer;
                }
            }
            .page-pagination {
                position: absolute;
                left: 50%;
                bottom: 20px;
                z-index: 10px;
                transform: translateX(-50%);
            }
            .pagination {
                text-align: center;
                padding: 20px;
            }

        }
        .modal-select {
            width: 85%;
        }
        .parameter-item {
            margin-bottom: 10px;
        }
        .component-button {
            cursor: pointer;
            padding: 0 5px;
            color: #3399ff;
            border-right: 1px solid #e3e8ee;
        }
        .last-button {
            border: none;
        }
        .blue {
            color: rgb(51, 153, 255);
        }
        .orange {
            color: rgb(255, 104, 1);
        }
        .red {
            color: rbb(255, 0, 0);
        }
    }

</style>