<template>
    <Panel :title="$t('components.SDKZ')">
        <Wb-form ref="speedControl" :rule="ruleValidate">
            <template v-if="FesFesx.enginSelect !== 'SQOOP'">
                <Form-item class="form-item-padding" prop="speedLimit" :label="$t('components.ZYSLXZ')" :label-width="170">
                    <Row>
                        <Cell span="10">
                            <Wb-input v-model="speed.mBytes" type="number" min="0" @on-blur="mBytes_v" />
                        </Cell>
                        <Cell span="6" class="stander-height">
                            Mb/s
                        </Cell>
                    </Row>
                </Form-item>
                <Form-item v-if="FesFesx.firstIsSelectRecord === 'record'" class="form-item-padding" prop="jobLimit" :label="$t('components.ZYJLXZ')" :label-width="170">
                    <Row>
                        <Cell span="10">
                            <Wb-input v-model="speed.record" type="number" min="0" @on-blur="record_v" />
                        </Cell>
                        <Cell span="6" class="stander-height">
                            {{ $t('components.T') }}
                        </Cell>
                    </Row>
                </Form-item>
                <Form-item v-if="isShowErrorLimit || FesFesx.firstIsSelectRecord === 'record'" class="form-item-padding" prop="errorLimit" :label="$t('components.CWJLCG')" :label-width="170">
                    <Row>
                        <Cell span="10">
                            <Wb-input v-model="errorLimit.record" type="number" min="0" @on-blur="errorRecord_v" />
                        </Cell>
                        <Cell span="6" class="stander-height">
                            {{ $t('components.RWSB') }}
                        </Cell>
                    </Row>
                </Form-item>
            </template>
            <Form-item>
                <Wb-button :icon="advance.advanceOption ? 'down' : 'up'" type="primary" @click="advance.advanceOption = !advance.advanceOption">
                {{ $t('components.GJ') }}
                </Wb-button>
            </Form-item>
            <Form-item v-if="advance.advanceOption" class="form-item-padding" prop="mParallel" :label="$t('components.ZYZDBXS')" :label-width="170">
                <Row>
                    <Cell span="10">
                        <Wb-input v-model="advance.mParallel" type="number" min="0" @on-input="mParallelCheck" />
                    </Cell>
                    <Cell span="6" class="stander-height">
                    {{ $t('components.G') }}
                    </Cell>
                </Row>
            </Form-item>
            <Form-item v-if="advance.advanceOption" class="form-item-padding" prop="mMemory" :label="$t('components.ZYZDNC')" :label-width="170">
                <Row>
                    <Cell span="10">
                        <Wb-input v-model="advance.mMemory" type="number" min="0" @on-input="mMemoryCheck" />
                    </Cell>
                    <Cell span="6" class="stander-height">
                        M
                    </Cell>
                </Row>
            </Form-item>
            <Form-item>
                <Row>
                    <Cell span="12">
                    <Wb-button type="primary" @click="partFourPre">
                        {{ $t('components.SYT') }}
                    </Wb-button>
                    </Cell>
                    <Cell span="12">
                    <Wb-button type="primary" class="next-button" @click="partFourNext">
                    {{ $t('components.XYB') }}
                    </Wb-button>
                    </Cell>
                </Row>
            </Form-item>
        </Wb-form>
    </Panel>
</template>
<script>

export default {
    props: {
        editData: {
            type: null
        }
    },
    FesData() {
        const validateMemory = (rule, value, callback) => {
            if (value > 32 * 1024) {
                callback(new Error(`${this.$t('components.NCBCG')}32G`));
            }
            if (value < 64) {
                callback(new Error(`${this.$t('message.newComponents.Notlessthanminimummemory')}64M`));
            }
            callback();
        }
        const validateParallel = (rule, value, callback) => {
            if (value > 999) {
                callback(new Error(`${this.$t('components.ZYZDBXSBCG')}999`));
            }
            callback();
        }
        const validateSpeedLimit = (rule, value, callback) => {
            if (value > 100 * 1024) {
                callback(new Error(`${this.$t('components.ZYSLBCG')}100G`));
            }
            callback();
        }
        return {
            speed: {
                mBytes: '10',
                record: '10000'
            },
            errorLimit: {
                record: '1'
            },

            numVPattern: new RegExp(/[^0-9]+/),
            ruleValidate: {
                speedLimit: [
                    {required: true, message: this.$t('components.SRZQZYSL')},
                    {validator: validateSpeedLimit, trigger: 'blur'}
                ],
                jobLimit: [
                    {required: true, message: this.$t('components.ZQSRZYJLSXZ')}
                ],
                errorLimit: [
                    {required: true, message: this.$t('components.QSRZQCWJLS')}
                ],
                mParallel: [
                    {required: false, message: this.$t('components.SRZQQZYZDBXS')},
                    {validator: validateParallel, trigger: 'blur'}
                ],
                mMemory: [
                    {required: false, message: this.$t('components.SRZQZYZDNC')},
                    {validator: validateMemory, trigger: 'blur'}
                ]
            },
            advance: {
                advanceOption: false,
                mParallel: null,
                mMemory: null
            }
        }
    },
    computed: {
        isShowErrorLimit() {
            return this.FesFesx.FirstCurrentDataSourceType === 'hive' && this.FesFesx.secondCurrentDataSourceType === 'hive';
        }
    },
    FesReady() {
        if (this.editData != '') {
            this.speed.mBytes = this.editData.config.speed.mBytes;
            this.speed.record = this.editData.config.speed.record;
            this.errorLimit.record = this.editData.config.errorLimit.record;
            this.advance.advanceOption = this.editData.config.advance.advanceOption;
            this.advance.mParallel = this.editData.config.advance.mParallel || null;
            this.advance.mMemory = this.editData.config.advance.mMemory || null;
        }
    },
    methods: {
        mBytes_v() {
            if ( this.numVPattern.test(this.speed.mBytes)) {
                this.speed.mBytes = '';
            }
        },
        record_v() {
            if ( this.numVPattern.test(this.speed.record)) {
                this.speed.record = '';
            }
        },
        errorRecord_v() {
            if ( this.numVPattern.test(this.errorLimit.record)) {
                this.errorLimit.record = '';
            }
        },
        mParallelCheck() {
            // if ( this.numVPattern.test(this.advance.mParallel)) {
            // this.advance.mParallel = '';
            // }
        },
        mMemoryCheck() {
            // if ( this.numVPattern.test(this.advance.mMemory)) {
            // this.advance.mMemory = '';
            // }
        },
        partFourPre() {
            this.$emit('fourPre', true);
        },
        partFourNext() {
            this.$refs.speedControl.validate((validate) => {
                if (validate) {
                    if (this.FesFesx.firstIsSelectRecord === 'stream') {
                        this.speed.record = '';
                        this.errorLimit.record = '';
                    }
                    this.$emit('fourNext', this.speed, this.errorLimit, this.advance);
                }
            })
        },
        clear() {
            this.speed.mBytes = '';
            this.speed.record = '';
            this.errorLimit.record = '';
        }
    }
}
</script>
<style lang="scss" scoped>
    .form-item-padding {
        padding-left: 120px;
    }
</style>
