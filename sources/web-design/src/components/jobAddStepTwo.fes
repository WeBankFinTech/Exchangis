<template>
     <Panel :title="$t('components.XZSJY')">
        <Wb-form ref="DataSource" :rule="ruleValidate">
            <Row>
                <Cell span="24">
                    <Form-item :label="$t('components.SJYLX')" :label-width="120">
                        <Wb-select v-model="addData.type" @on-change="typeChange">
                            <wb-option v-for="item in dataSourceTypeList" :key="item" :value="item" />
                        </Wb-select>
                    </Form-item>
                </Cell>
            </Row>
            <template v-if="addData.type === 'hive' || addData.type === ''">
            <hiveSecond
                :add-data="addData"
                :source-origin="sourceOrigin"
                :db-data-list="dbDataList"
                :table-list="tableList"
                :part-val="partVal"
                :ds_loading="ds_loading"
                :db_loading="db_loading"
                :table_loading="table_loading"
                :part_loading="part_loading"
                @sourceChange="sourceChange"
                @dbSeleted="dbSeleted"
                @tableValueChange="tableValueChange"
                @partValueSelect="partValueSelect"
                @partCustom="partCustom"
                @partCustomClear="partCustomClear"
                 />
            </template>
            <template v-if="addData.type === 'local_fs'">
                <local-fs-second :local-fs-data="localFsData" @localFsData="localFsDataAction" />
            </template>
            <template v-if="addData.type === 'hdfs'">
                <hdfsSecond :step-second-data="hdfsData" :source-origin="sourceOrigin" :ds-loading="ds_loading" @stepSecondData="hdfsDataAction" />
            </template>
            <template v-if="addData.type === 'sftp'">
                <sftpSecond :step-second-data="sftpData" :source-origin="sourceOrigin" :ds-loading="ds_loading" @stepSecondData="sftpDataAction" />
            </template>
            <template v-if="addData.type === 'elasticsearch'">
                <elaticSearch
                :step-second-data="elasticSearchData"
                :source-origin="sourceOrigin"
                :ds-loading="ds_loading"
                :db_loading="db_loading"
                :table_loading="table_loading"
                :index-name-list="indexNameList"
                :index-type-list="indexTypeList"
                :edit-data="editData"
                @stepSecondData="elasticSearchDataAction"
                @sourceChange="elasticSourceChange"
                @indexNameChange="indexNameChange" />
            </template>
            <template v-if="addData.type === 'mysql'">
                <mysql
                    :step-one-data="tdsqlData"
                    :source-origin="sourceOrigin"
                    :ds-loading="ds_loading"
                    :db-data-list="tdsqlValue.dbs"
                    :table-list="tdsqlValue.tables"
                    :ds_loading="ds_loading"
                    :db_loading="db_loading"
                    :table_loading="table_loading"
                    @stepOneData="tdsqlDataAction"
                    @sourceChange="tdsqlSourceChange"
                    @dbSeleted="tdsqlDbSeleted"
                    @tableValueChange="tdsqlTableValueChange" />
            </template>
            <template v-if="addData.type === 'oracle'">
                <oracle
                    :step-one-data="oracleData"
                    :source-origin="sourceOrigin"
                    :ds-loading="ds_loading"
                    :db-data-list="oracleValue.dbs"
                    :table-list="oracleValue.tables"
                    :ds_loading="ds_loading"
                    :db_loading="db_loading"
                    :table_loading="table_loading"
                    @stepOneData="tdsqlDataAction"
                    @sourceChange="oracleSourceChange"
                    @dbSeleted="oracleDbSeleted"
                     />
            </template>
            <Row v-if="writeModeShow">
                <Cell span="24">
                    <Form-item :label="$t('uiTemplate.BJXR')" prop="writeMode" :label-width="120">
                        <Wb-select v-model="writeMode">
                            <Wb-option v-for="item in writeModeList" :key="item.value" :value="item.value">
                            {{ item.lable }}
                            </Wb-option>
                        </Wb-select>
                    </Form-item>
                </Cell>
            </Row>
            <Row v-if="syncMetaShow">
                <Cell span="24">
                    <Form-item :label="$t('components.TBYXX')" porp="syncMeta" :label-width="100">
                        <Radio v-model="syncMeta" />
                    </Form-item>
                </Cell>
            </Row>
            <Form-item>
                <Row>
                    <Cell span="12">
                        <Wb-button type="primary" @click="partTwoPre">
                            {{ $t('components.SYB') }}
                        </Wb-button>
                    </Cell>
                    <Cell span="12">
                        <Wb-button type="primary" class="next-button" :disabled="nextStepButtonDisable" @click="parNextStep">
                           {{ $t('components.XYB') }}
                        </Wb-button>
                    </Cell>
                </Row>
            </Form-item>
        </Wb-form>
    </Panel>
</template>
<script>
import localFsSecond from './uiTemplate/localFsSecond.fes';
import hdfsSecond from './uiTemplate/hdfsSecond.fes';
import hiveSecond from './uiTemplate/hiveStep.fes';
import sftpSecond from './uiTemplate/sftpSecond.fes';
import jobStepMixin from '../mixin/jobStepMixin.js'
import elaticSearch from './uiTemplate/elasticSearchSecond.fes';
import mysql from './uiTemplate/tdsqlSecond.fes';
import oracle from './uiTemplate/oracleSecond.fes';
import { SOURCETYPE, TRANSFERTYPE } from '../constants/common.js';
export default {
    components: {
        localFsSecond,
        hdfsSecond,
        hiveSecond,
        sftpSecond,
        elaticSearch,
        mysql,
        oracle
    },
    props: {
        editData: {
            type: null
        },
        treeId: {
            type: null
        }
    },
    mixins: [jobStepMixin],
    FesData() {
        return {
            localFsData: {
                type: '',
                path: '',
                compress: '',
                encoding: '',
                fileName: '',
                fieldDelimiter: ''
            },
            hdfsData: {
                type: '',
                dataSourceId: '',
                path: '',
                compress: '',
                encoding: '',
                fileName: '',
                fileType: '',
                fieldDelimiter: ''
            },
            sftpData: {
                type: '',
                dataSourceId: '',
                path: '',
                compress: '',
                encoding: '',
                fileName: '',
                fieldDelimiter: '',
                transit: false
            },
            elasticSearchData: {
                type: '',
                dataSourceId: '',
                indexName: '',
                indexType: '',
                batchSize: '',
                usePostProcess: false
            },
            tdsqlData: {
                type: '',
                dataSourceId: '',
                DBData: '',
                table: '',
                writeMode: '',
                batchSize: ''
            },
            oracleData: {
                type: '',
                dataSourceId: '',
                DBData: '',
                table: '',
                batchSize: ''
            },
            isAdd: false,
            tdsqlValue: {
                dbs: [],
                tables: []
            },
            oracleValue: {
                dbs: [],
                tables: []
            },
            indexNameList: [],
            indexTypeList: [],
            syncMeta: false,
            writeModeList: [
                {lable: this.$t('message.newComponents.Emptydirectory'), value: 'truncate'},
                {lable: this.$t('message.newComponents.Additionaldata'), value: 'append'}
            ],
            writeMode: ''
        }
    },
    watch: {
        sourceOrigin(val) {
            if (val.length > 0 && this.editData !== '') {
                this.changeDataSourceId(this.typeTransitionDataName(this.editData.dataDestType), val, 'dataDestId');
            }

        },
        dbDataList(val) {
            if (val.length > 0 && this.editData !== '' && this.editData.config.dataDstParams.database !== '') {
                if (val.includes(this.editData.config.dataDstParams.database)) {
                    this.addData.DBData = this.editData.config.dataDstParams.database;
                }
            }

        },
        tableList(val) {
            if (val.length > 0 && this.editData !== '') {
                if (val.includes(this.editData.config.dataDstParams.table)) {
                    this.addData.table = this.editData.config.dataDstParams.table;
                }
            }

        },
        'tdsqlValue.dbs'(val) {
            if (val.length > 0 && this.editData !== '' ) {
                if (val.includes(this.editData.config.dataDstParams.database)) {
                    this.tdsqlData.DBData = this.editData.config.dataDstParams.database;
                }
            }
        },
        'tdsqlValue.tables'(val) {
            if (val.length > 0 && this.editData !== '' ) {
                if (val.includes(this.editData.config.dataDstParams.table)) {
                    this.tdsqlData.table = this.editData.config.dataDstParams.table;
                }
            }
        },
        'oracleValue.dbs'(val) {
            if (val.length > 0 && this.editData !== '' ) {
                if (val.includes(this.editData.config.dataDstParams.database)) {
                    this.oracleData.DBData = this.editData.config.dataDstParams.database;
                }
            }
        },
        'oracleValue.tables'(val) {
            if (val.length > 0 && this.editData !== '' ) {
                if (val.includes(this.editData.config.dataDstParams.table)) {
                    this.oracleData.table = this.editData.config.dataDstParams.table;
                }
            }
        },
        indexNameList(val) {
            if (val.length > 0 && this.editData !== '' && this.editData.config.dataDstParams.indexName !== '') {
                this.elasticSearchData.indexName = this.editData.config.dataDstParams.indexName;
                this.editData.config.dataDstParams.indexName = ''
            }
        },
        indexTypeList(val) {
            if (val.length > 0 && this.editData !== '' && this.editData.config.dataDstParams.indexType !== '') {
                if (val.includes(this.editData.config.dataDstParams.indexType)) {
                    this.elasticSearchData.indexType = this.editData.config.dataDstParams.indexType;
                }
            }
        }
    },
    FesReady() {
        this.editorAction(this.editData);
    },
    computed: {
        dataSourceTypeList() {
            if (this.FesFesx.enginSelect === 'SQOOP') {
                if (this.FesFesx.FirstCurrentDataSourceType === SOURCETYPE.HIVE) {
                    if (!this.editData) {
                        this.addData.type = SOURCETYPE.MYSQL
                    }
                    return [
                        SOURCETYPE.MYSQL
                    ]
                } else if (this.FesFesx.FirstCurrentDataSourceType === SOURCETYPE.MYSQL) {
                    if (!this.editData) {
                        this.addData.type = SOURCETYPE.HIVE
                    }
                    return [
                        SOURCETYPE.HIVE,
                        SOURCETYPE.HDFS
                    ]
                } else if (this.FesFesx.FirstCurrentDataSourceType === SOURCETYPE.HDFS) {
                    if (!this.editData) {
                        this.addData.type = SOURCETYPE.MYSQL
                    }
                    return [
                        SOURCETYPE.MYSQL
                    ]
                }
            } else {
                if (this.FesFesx.FirstCurrentDataSourceType === SOURCETYPE.MYSQL || this.FesFesx.firstIsSelectRecord === TRANSFERTYPE.RECORD || this.FesFesx.FirstCurrentDataSourceType === SOURCETYPE.ORACLE) {
                    if (!this.editData) {
                        this.addData.type = SOURCETYPE.HIVE
                    }
                    return [
                        SOURCETYPE.HIVE,
                        SOURCETYPE.LOCAL_FS,
                        SOURCETYPE.HDFS,
                        SOURCETYPE.SFTP,
                        SOURCETYPE.ELASTICSEARCH,
                        SOURCETYPE.MYSQL,
                        SOURCETYPE.ORACLE
                    ]
                } else {
                    if (!this.editData) {
                        this.addData.type = SOURCETYPE.HIVE;
                    }
                    return [
                        SOURCETYPE.HIVE,
                        SOURCETYPE.LOCAL_FS,
                        SOURCETYPE.HDFS,
                        SOURCETYPE.SFTP
                        // SOURCETYPE.MYSQL
                    ]
                }
            }
        },
        syncMetaShow() {
            return (this.FesFesx.FirstCurrentDataSourceType === SOURCETYPE.HIVE && (this.FesFesx.secondCurrentDataSourceType === SOURCETYPE.HIVE || this.FesFesx.secondCurrentDataSourceType === SOURCETYPE.SFTP)) || (this.FesFesx.FirstCurrentDataSourceType === SOURCETYPE.SFTP && this.FesFesx.secondCurrentDataSourceType === SOURCETYPE.HIVE);
        },
        writeModeShow() {
            return this.FesFesx.enginSelect !== 'SQOOP' && [SOURCETYPE.HIVE, SOURCETYPE.HDFS, SOURCETYPE.SFTP, SOURCETYPE.LOCAL_FS].includes(this.FesFesx.secondCurrentDataSourceType)
        }
    },
    methods: {
        partTwoPre() {
            this.$emit('preTwo', true)
        },
        typeChange(value) {
            this.FesFesx.set('secondCurrentDataSourceType', value);
            this.nextStepButtonDisable = false;
            this.addData.dataSourceValue = '';
            this.addData.dataSourceId = '';
            this.addData.DBData = '';
            this.addData.table = '';
            this.sourceOrigin = [];
            this.dbDataList = [];
            this.tableList = [];
            this.partKey = '';
            this.partVal = [{name: '', value: '', partitions: {}}];

            if (this.addData.type === SOURCETYPE.HIVE) {
                this.getSourceDataList(value);
            } else if (this.addData.type === SOURCETYPE.LOCAL_FS) {
                this.localFsData.type = value;
            } else if (value === SOURCETYPE.SFTP) {
                this.sftpData.type = value;
                this.getSourceDataList(value);
            } else if (value === SOURCETYPE.ELASTICSEARCH) {
                this.elasticSearchData.type = value;
                this.getSourceDataList(value);
            } else if (value === SOURCETYPE.MYSQL) {
                this.tdsqlData.type = value;
                this.getSourceDataList(value);
            } else if (value === SOURCETYPE.ORACLE) {
                this.FesFesx.set('firstIsSelectRecord', TRANSFERTYPE.RECORD);
                this.oracleData.type = value;
                this.getSourceDataList(value);
            } else {
                this.hdfsData.type = value;
                this.getSourceDataList(value);
            }
        },
        editorAction(val) {
            if (val) {
                this.FesFesx.set('secondCurrentDataSourceType', val.config.dataDstParams.type);
                this.addData.type = val.config.dataDstParams.type;
                if (val.config.syncMeta) {
                    this.syncMeta = val.config.syncMeta;
                }
                if (val.config.dataDstParams && val.config.dataDstParams.writeMode) {
                    this.writeMode = val.config.dataDstParams.writeMode;
                }
                if (val.config.dataDstParams.type === SOURCETYPE.LOCAL_FS) {
                    this.localFsData = {
                        ...val.config.dataDstParams
                    }
                    this.localFsData.type = val.config.dataDstParams.type;
                } else if (val.config.dataDstParams.type === SOURCETYPE.HDFS) {
                    this.hdfsData = {
                        ...val.config.dataDstParams
                    }
                    this.hdfsData.type = val.config.dataDstParams.type;
                } else if (val.config.dataDstParams.type === SOURCETYPE.SFTP) {
                    this.sftpData = {
                        ...val.config.dataDstParams
                    }
                    this.sftpData.type = val.config.dataDstParams.type;
                    this.sftpData.dataSourceId = val.config.dataDestId;
                } else if (val.config.dataDstParams.type === SOURCETYPE.ELASTICSEARCH) {
                    this.elasticSearchData.type = val.config.dataDstParams.type;
                    this.elasticSearchData.dataSourceId = val.config.dataDestId;
                    this.elasticSearchData.batchSize = val.config.dataDstParams.batchSize;
                    this.elasticSearchData.usePostProcess = val.config.usePostProcess;
                    this.FesFesx.set('usePostProcess', val.config.usePostProcess);
                } else if (val.config.dataDstParams.type === SOURCETYPE.MYSQL) {
                    this.tdsqlData = {
                        ...val.config.dataDstParams
                    }
                } else if (val.config.dataDstParams.type === SOURCETYPE.ORACLE) {
                    this.oracleData = {
                        ...val.config.dataDstParams
                    }
                }
            }
        },
        tableValueChange(value) {
            this.tableValueChangeAction(value, 'dataDstParams');
        },
        partValueSelect({index, value, partitions}) {
            this.partValueSelectAction(index, value, partitions, 'dataDstParams')
        },
        elasticSearchDataAction(params) {
            this.elasticSearchData = params;
        },
        tdsqlTableValueChange(value) {
            console.log(value, 'tablechange')
        },
        tdsqlSourceChange(value) {
            this.tdsqlData.DBData = '';
            this.tdsqlData.table = '';
            this.tdsqlValue.dbs = [];
            this.tdsqlValue.tables = [];
            if (value == '') {
                return false;
            } else {
                this.db_loading = true;
                this.FesApi.fetch('/datasource/meta/mysql/' + value + '/dbs', {}, {
                    method: 'get',
                    timeout: '60000'
                }).then(rst => {
                    this.db_loading = false;
                    this.tdsqlValue.dbs = JSON.stringify(rst) === '{}' ? [] : rst;
                }).catch(() => this.db_loading = false);
            }
        },
        tdsqlDbSeleted(value) {
            this.tdsqlData.table = '';
            this.tdsqlValue.tables = [];
            if (value != '') {
                this.table_loading = true;
                this.FesApi.fetch('/datasource/meta/mysql/' + this.tdsqlData.dataSourceId + '/' + value + '/tables', {}, {
                    method: 'get',
                    timeout: '60000'
                }).then(rst => {
                    this.table_loading = false;
                    this.tdsqlValue.tables = JSON.stringify(rst) === '{}' ? [] : rst;
                }).catch(() => this.table_loading = false);
            }
        },
        oracleSourceChange(value) {
            this.oracleData.DBData = '';
            this.oracleData.table = '';
            this.oracleValue.dbs = [];
            this.oracleValue.tables = [];
            if (value == '') {
                return false;
            } else {
                this.db_loading = true;
                this.FesApi.fetch('/datasource/meta/oracle/' + value + '/dbs', {}, {
                    method: 'get',
                    timeout: '60000'
                }).then(rst => {
                    this.db_loading = false;
                    this.oracleValue.dbs = JSON.stringify(rst) === '{}' ? [] : rst;
                }).catch(() => this.db_loading = false);
            }
        },
        oracleDbSeleted(value) {
            this.oracleData.table = '';
            this.oracleValue.tables = [];
            if (value != '') {
                this.table_loading = true;
                this.FesApi.fetch('/datasource/meta/oracle/' + this.oracleData.dataSourceId + '/' + value + '/tables', {}, {
                    method: 'get',
                    timeout: '60000'
                }).then(rst => {
                    this.table_loading = false;
                    this.oracleValue.tables = JSON.stringify(rst) === '{}' ? [] : rst;
                }).catch(() => this.table_loading = false);
            }
        },
        elasticSourceChange(value) {
            this.indexNameList = [];
            this.indexTypeList = [];
            this.elasticSearchData.indexName = '';
            this.elasticSearchData.indexType = '';
            this.db_loading = true;
            this.FesApi.fetch('/datasource/meta/elastic/' + value + '/indices', {}, {
                method: 'get',
                timeout: '60000'
            }).then(rst => {
                this.indexNameList = JSON.stringify(rst) === '{}' ? [] : rst;
                this.db_loading = false;
            }).catch(() => this.db_loading = false);
        },
        indexNameChange(value) {
            this.elasticSearchData.indexType = '';
            if (value && !this.indexNameList.includes(value)) {
                this.indexTypeList = ['_doc'];
                return;
            }
            if (!value) return;
            this.table_loading = true;
            this.FesApi.fetch('/datasource/meta/elastic/' + this.elasticSearchData.dataSourceId + '/' + value + '/types', {}, {
                method: 'get',
                timeout: '60000'
            }).then(rst => {
                this.indexTypeList = JSON.stringify(rst) === '{}' ? [] : rst;
                this.table_loading = false;
            }).catch(() => this.table_loading = false);
        }
    }
}
</script>