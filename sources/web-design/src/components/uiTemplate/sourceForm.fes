<style scoped lang="scss">
    .margin-bottom {
        margin-bottom: 10px;
        .icon-plus {
            cursor: pointer;
        }
        .text-dec {
            text-align: left;
            margin-left: 5px;
        }
    }
    .display-none {
        padding-bottom: 0px;
        display: none;
    }
    .float-right {
        float: right;
        margin-right: 25px;
    }
    .template-selecct {
        width: 70%;
    }
    .refresh {
        padding: 3px 6px;
        margin-right: 10px;
        color: #3399ff;
        cursor: pointer;
    }
    .create-template {
        color: #3399ff;
        cursor: pointer;
    }
</style>

<template>
    <Wb-form ref="source_validate" label-position="left" :label-width="130" :rule="sourceRule">
        <Form-item :label="$t('uiTemplate.SJYMC')" prop="name">
            <wb-input v-model="sourceForm.name" :placeholder="$t('uiTemplate.SRSJYMC')" />
        </Form-item>
        <Form-item :label="$t('uiTemplate.SJYMS')" prop="desc">
            <wb-input v-model="sourceForm.desc" :placeholder="$t('uiTemplate.TXXQMS')" />
        </Form-item>
        <Form-item :label="$t('uiTemplate.SJYSZ')" prop="owner">
            <Wb-select v-model="sourceForm.owner">
                <wb-option v-for="dsOwner in dsOwners" :key="dsOwner.id" :value="dsOwner.ownerName"
                           :label="dsOwner.ownerName" />
            </Wb-select>
        </Form-item>
        <Form-item :label="$t('uiTemplate.LJMB')" prop="sourceTemplate">
            <Wb-select v-model="sourceForm.templateId" class="template-selecct">
                <wb-option v-for="item in sourceTemplateList" :key="item.id" :value="item.id" :label="item.modelName" />
            </Wb-select>
            <span class="refresh" @click="refreshTemplate">{{ $t('uiTemplate.SX') }}</span>
            <span class="create-template" @click="createTemplate">{{ $t('uiTemplate.CJMB') }}</span>
        </Form-item>
        <Form-item v-if="checkAuthority(sourceForm)" :label="$t('uiTemplate.BDXM')" prop="bindProject">
            <Wb-select v-model="sourceForm.bindProject">
                <wb-option v-for="item in projectDataList" :key="item.id" :value="item.id" :label="item.projectName" />
            </Wb-select>
        </Form-item>
        <Form-item v-if="isOwnerOrAdmin(sourceForm)" :label="$t('uiTemplate.DWQX')">
            <Checkbox-group v-model="sourceForm.authScopes">
                <Checkbox v-show="false" value="READ" disabled>
                    {{ $t('uiTemplate.KD') }}
                </Checkbox>
                <Checkbox value="WRITE">
                   {{ $t('uiTemplate.KBJ') }}
                </Checkbox>
                <Checkbox value="EXECUTE">
                   {{ $t('uiTemplate.KSY') }}
                </Checkbox>
                <Checkbox value="DATA_READ">
                    {{ $t('uiTemplate.SJDQ') }}
                </Checkbox>
                <Checkbox value="DATA_WRITE">
                    {{ $t('uiTemplate.SJXR') }}
                </Checkbox>
            </Checkbox-group>
        </Form-item>
        <div v-if="currentTemplateParameter.authType === 'KERBERS' || currentTemplateParameter.authType === 'KEYFILE'">
            <Form-item v-if="activeType === 'update' && sourceForm.authCreden !== '' &&
                sourceForm.keytabFile === null" :label="currentTemplateParameter.authType === 'KERBERS' ? `keytab${$t('uiTemplate.WJ')}` : $t('uiTemplate.MYWJ')" prop="keytabFile">
                <Row>
                    <Cell span="10">
                        <wb-input v-model="sourceForm.authCreden" type="text" disabled />
                    </Cell>
                    <Cell span="1">
                        <span>&nbsp;</span>
                    </Cell>
                    <Cell span="11">
                        <wb-input v-model="sourceForm.keytabFile" type="file" />
                    </Cell>
                </Row>
            </Form-item>
            <Form-item v-else :label="currentTemplateParameter.authType === 'KERBERS' ? $t('uiTemplate.WJ') : $t('uiTemplate.MYWJ')" prop="keytabFile">
                <wb-input v-model="sourceForm.keytabFile" type="file" />
            </Form-item>
            <Form-item :label="$t('uiTemplate.YHM')" prop="authEntity">
                <wb-input v-model="sourceForm.authEntity" :placeholder="$t('uiTemplate.GSXR')" width="75%" />
            </Form-item>
        </div>
        <div v-else-if="currentTemplateParameter.authType === 'LDAP'">
            <Form-item class="display-none" prop="none">
                <Wb-input />
            </Form-item>
            <Form-item :label="`LDAP${$t('uiTemplate.YHM')}`" prop="userName">
                <Wb-input v-model="sourceForm.userName" />
            </Form-item>
            <Form-item :label="`LDAP${$t('uiTemplate.MA')}`" prop="userPassword">
                <wb-input v-model="sourceForm.userPassword" type="password" @on-blur="passwordBlur" @on-focus="passwordFocus" />
            </Form-item>
        </div>
        <div v-else-if="currentTemplateParameter.authType === 'DEFAULT'">
            <Form-item class="display-none" prop="none">
                <Wb-input />
            </Form-item>
            <Form-item :label="$t('uiTemplate.YHM')" prop="userName">
                <Wb-input v-model="sourceForm.userName" />
            </Form-item>
            <Form-item :label="$t('uiTemplate.MA')" prop="userPassword">
                <Wb-input v-model="sourceForm.userPassword" type="password" />
            </Form-item>
        </div>
        <Form-item>
            <Wb-button ref="check_button" type="primary" :disabled="activeType === 'detail'" @click="connCheck">
                {{ $t('uiTemplate.LJCS') }}
            </Wb-button>
            <Wb-button v-if="activeType == 'add'" ref="create_button" type="primary" class="float-right" :disabled="buttonDisable" @click="sourceCreate">
                {{ $t('uiTemplate.SUBMIT') }}
            </Wb-button>
            <Wb-button v-else ref="update_button" type="primary" class="float-right" :disabled="buttonDisable || activeType === 'detail'" @click="sourceUpdate">
                {{ $t('uiTemplate.GX') }}
            </Wb-button>
        </Form-item>
    </Wb-form>
</template>
<script>
export default {
    props: {
        currentType: {
            type: String,
            default: ''
        },
        activeType: {
            type: String,
            default: ''
        },
        modifyData: {
            type: Object,
            default: null
        },
        projectDataList: {
            type: Array,
            default: []
        }
    },
    FesData() {
        return {
            buttonDisable: false,
            dsOwners: [],
            sourceForm: {
                id: 0,
                name: '',
                desc: '',
                owner: '',
                keytabFile: null,
                authCreden: '',
                authEntity: '',
                userName: '',
                userPassword: '',
                templateId: null,
                host: '',
                port: '',
                set: '',
                dcn: '',
                bindProject: '',
                createUser: '',
                authScopes: ['READ', 'EXECUTE']
            },
            sourceTemplateList: [],
            currentTemplateParameter: {},
            sourceRule: {
                name: [
                    {required: true, message: this.$t('uiTemplate.SJYMCBNK')},
                    {message: this.$t('uiTemplate.MCCDBNDY'), max: 100},
                    {type: 'string', pattern: /^[a-zA-Z0-9_\u4e00-\u9fa5-.:]*$/, message: this.$t('uiTemplate.ZZCZM'), trigger: 'change'}
                ],
                desc: [
                    {required: false, message: this.$t('uiTemplate.MSCDBNDY'), max: 100}
                ],
                owner: [
                    {required: true, message: this.$t('uiTemplate.SJYSZBNWK')}
                ],
                keytabFile: [
                    {required: true, message: `${this.$t('uiTemplate.QXZ')}${this.$t('uiTemplate.WJ')}`}
                ],
                authEntity: [
                    {required: true, message: this.$t('uiTemplate.RZSTBNWK')},
                    {message: this.$t('uiTemplate.YHMCDBNDY'), max: 100}
                ],
                userName: [
                    {required: true, message: this.$t('uiTemplate.YHMBNWK')},
                    {message: this.$t('uiTemplate.YHMCDBNDY'), max: 100}
                ],
                userPassword: [
                    {required: true, message: this.$t('uiTemplate.MABNWK')},
                    {message: this.$t('uiTemplate.YHMABNDY'), max: 30}
                ],
                sourceTemplate: [
                    {required: true, message: this.$t('uiTemplate.LJMBBNWK')}
                ]
            }
        }
    },
    computed: {
        userName() {
            return this.FesApp.get('FesUserName')
        }
    },
    created() {

        this.init().then((res) => {
            this.sourceTemplateList = res[0] || [];
            this.dsOwners = res[1];
            if (this.modifyData) {
                this.injectForm(this.modifyData);
            }
        })
    },
    watch: {
        'sourceForm.templateId'(id) {
            if (id) {
                this.sourceTemplateList.forEach((item) => {
                    if (item.id === id) {
                        this.currentTemplateParameter = JSON.parse(item.parameter);
                    }
                })
            }
        },
        'sourceForm.authScopes'(newVal, oldValue) {
            // 只要选了数据读取或者数据写入就一定可以使用
            if ((newVal.includes('DATA_READ') || newVal.includes('DATA_WRITE')) && !newVal.includes('EXECUTE')) {
                this.sourceForm.authScopes.push('EXECUTE')
            }
        }
    },
    methods: {
        passwordFocus(e) {
            if (this.activeType === 'add') return;
            if (e.target.value === '********') {
                this.sourceForm.userPassword = '';
            }
        },
        passwordBlur(e) {
            if (this.activeType === 'add') return;
            if (!e.target.value) {
                this.sourceForm.userPassword = '********';
            }
        },
        createTemplate() {
            let routeData = this.$router.resolve({
                path: '/ds/dataTemplate',
                query: {
                    currentType: this.currentType
                }
            });
            window.open(routeData.href, '_blank');
        },
        refreshTemplate() {
            this.FesApi.fetch('/model/selectAll', {
                sourceType: this.currentType,
                createOwner: this.activeType === 'add' ? this.userName : this.modifyData.createUser
            }, 'get').then(res => {
                this.sourceTemplateList = res;
            })
        },
        init() {
            return Promise.all([
                this.FesApi.fetch('/model/selectAll', {
                    sourceType: this.currentType,
                    createOwner: this.activeType === 'add' ? this.userName : this.modifyData.createUser
                }, 'get'),
                this.FesApi.fetch('/admin/dsOwner/selectAll', 'get')
            ])
        },
        kbChange() {
            this.$refs.source_validate.resetFields();
        },
        connCheck() {
            this.$refs.source_validate.validate(valid => {
                if (valid) {
                    this.$emit('connect', this.buildForm());
                } else {
                    this.$Toast(this.$t('uiTemplate.QTXZQBDX'));
                }
            });
        },
        sourceCreate() {
            this.$refs.source_validate.validate(valid => {
                if (valid) {
                    this.$emit('add', this.buildForm());
                } else {
                    this.$Toast(this.$t('uiTemplate.QTXZQBDX'));
                }
            });
        },
        sourceUpdate() {
            this.$refs.source_validate.validate(valid => {
                if (valid) {
                    this.$emit('update', this.buildForm());
                } else {
                    this.$Toast(this.$t('uiTemplate.QTXZQBDX'));
                }
            });
        },
        injectForm(data) {
            this.sourceForm.name = data.sourceName;
            this.sourceForm.owner = data.owner;
            this.sourceForm.templateId = data.modelId;
            this.sourceForm.authEntity = data.authEntity;
            this.sourceForm.userName = data.authEntity;
            this.sourceForm.createUser = data.createUser;
            this.sourceForm.authScopes = data.authScopes;
            this.sourceForm.bindProject = data.projectId;
            this.sourceForm.userPassword = '********';
            let fpath = data.authCreden;
            if (typeof (fpath) !== 'undefined') {
                this.sourceForm.authCreden = fpath.substring(fpath.lastIndexOf('/') + 1);
            }
            this.sourceForm.desc = data.sourceDesc || '';
            this.sourceForm.id = data.id;
        },
        buildForm() {
            let form = new FormData();
            form.append('sourceName', this.sourceForm.name);
            form.append('sourceDesc', this.sourceForm.desc);
            form.append('sourceType', this.currentType.toLowerCase());
            form.append('owner', this.sourceForm.owner);
            form.append('authScopes', this.sourceForm.authScopes);
            if (this.sourceForm.bindProject) {
                form.append('projectId', this.sourceForm.bindProject)
            }

            form.append('modelId', this.sourceForm.templateId);
            if (this.currentTemplateParameter.authType === 'KERBERS' || this.currentTemplateParameter.authType === 'KEYFILE') {
                form.append('authEntity', this.sourceForm.authEntity);
                if (null !== this.sourceForm.keytabFile) {
                    form.append('authFile', this.sourceForm.keytabFile);
                }
            } else {
                if (this.currentTemplateParameter.authType !== 'NONE') {
                    let password = this.sourceForm.userPassword;
                    if (password === '********') {
                        password = '';
                    }
                    form.append('authCreden', password);
                    form.append('authEntity', this.sourceForm.userName);
                }
            }
            if (this.sourceForm.id > 0) {
                form.append('id', this.sourceForm.id);
            }
            return form;
        },
        isOwnerOrAdmin(data) {
            const userRole = this.FesStorage.get('userRole');
            return data.createUser === this.userName || ['super', 'admin'].includes(userRole);
        },
        checkAuthority(data, type = '') {
            const userRole = this.FesStorage.get('userRole');
            if (data.createUser === this.userName || ['super', 'admin'].includes(userRole) || this.activeType === 'add') {
                return true;
            } else {
                if (type && data.authScopes && data.authScopes.includes(type)) {
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
}
</script>