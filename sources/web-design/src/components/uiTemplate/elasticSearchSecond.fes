<template>
    <Row>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.SJY')" prop="source" :label-width="120">
                <Wb-select v-model="subData.dataSourceId" filterable @on-change="sourceChange">
                    <wb-option v-for="(item,index) in sourceOrigin" :key="index" :label="item.sourceName" :value="item.id" />
                    <Loading v-show="dsLoading" size="16px" class="loading-position" />
                </Wb-select>
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.SYMC')" prop="indexName" :label-width="120">
                <Wb-select v-model="subData.indexName" :placeholder="$t('uiTemplate.XZSYMC')" filterable @on-search="search" @on-change="indexNameChange">
                    <wb-option v-for="item in indexNameList" :key="item" :value="item" :label="item" />
                    <wb-option v-for="item in searchIndexName" :key="item" :value="item" :label="item" />
                    <Loading v-show="db_loading" size="16px" class="loading-position" />
                </Wb-select>
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.SYLX')" prop="indexType" :label-width="120">
                <Wb-select v-model="subData.indexType" :placeholder="$t('uiTemplate.XZSYLX')" @on-change="indexTypeChange">
                    <wb-option v-for="item in indexTypeList" :key="item" :value="item" :label="item" />
                    <Loading v-show="table_loading" size="16px" class="loading-position" />
                </Wb-select>
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.PLDX')" prop="batchSize" :label-width="120">
                <wb-input v-model="subData.batchSize" type="number" :placeholder="$t('uiTemplate.SRPLDX')" />
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.HZCLQ')" prop="usePostProcess" :label-width="120">
                <Radio v-model="subData.usePostProcess" :disabled="UsePostProcessDisable" />
            </Form-item>
        </Cell>
    </Row>
</template>
<script>
export default {
    name: 'elasticSearchSecond',
    props: {
        editData: {
            type: null
        },
        stepSecondData: {
            tepy: Object,
            default: {}
        },
        sourceOrigin: {
            tepy: Array,
            default: []
        },
        dsLoading: {
            type: Boolean,
            default: false
        },
        db_loading: {
            type: Boolean,
            default: false
        },
        table_loading: {
            type: Boolean,
            default: false
        },
        indexNameList: {
            type: Array,
            default: []
        },
        indexTypeList: {
            type: Array,
            default: []
        }
    },
    data() {
        return {
            subData: this.stepSecondData,
            UsePostProcessDisable: true,
            searchIndexName: []
        }
    },
    computed: {
        transferVal() {
            return this.FesFesx.firstIsSelectRecord;
        }
    },
    mounted() {
        this.checkUsePostProcess(this.FesFesx.FirstCurrentDataSourceType);
    },
    watch: {
        subData: {
            handler(val) {
                this.$emit('stepSecondData', val);
            },
            deep: true
        },
        'subData.usePostProcess'(val) {
            this.FesFesx.set('usePostProcess', val);
        },
        'FesFesx.FirstCurrentDataSourceType'(val) {
            this.checkUsePostProcess(val);
        },
        'stepSecondData.indexName'(val) {
            if (this.indexNameList.includes(val)) {
                this.searchIndexName = [];
                // this.UsePostProcessDisable = false;
            } else {
                this.searchIndexName = [val];
                this.UsePostProcessDisable = true;
            }
        }
    },
    methods: {
        sourceChange(val) {
            this.$emit('sourceChange', val);
        },
        indexNameChange(val) {
            this.$emit('indexNameChange', val);
        },
        indexTypeChange(val) {
            this.$emit('indexTypeChange', val);
        },
        checkUsePostProcess(val) {
            if (val !== 'hive') {
                this.subData.usePostProcess = true;
                this.UsePostProcessDisable = true;
            } else {
                this.UsePostProcessDisable = false;
                if (this.editData) {
                    this.subData.usePostProcess = this.editData.config.usePostProcess;
                }
            }
        },

        search(val) {
            if (val) {
                if (this.indexNameList.includes(val)) {
                    this.searchIndexName = [];
                    this.UsePostProcessDisable = false;
                } else {
                    this.searchIndexName = [val];
                    this.subData.usePostProcess = true;
                    this.UsePostProcessDisable = true;
                }
            } else {
                this.searchIndexName = [];
                this.UsePostProcessDisable = false;
            }
        }
    }
}
</script>

