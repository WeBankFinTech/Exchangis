<template>
    <Row>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.SJY')" prop="source" :label-width="120">
                <Wb-select v-model="subData.dataSourceId" filterable>
                    <wb-option v-for="(item,index) in sourceOrigin" :key="index" :value="item.id" :label="item.sourceName" />
                    <Loading v-show="dsLoading" size="16px" class="loading-position" />
                </Wb-select>
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.LJ')" prop="path" :label-width="120">
                <wb-input v-model="subData.path" :placeholder="$t('uiTemplate.SRLJ')" />
            </Form-item>
        </Cell>
        <Cell v-if="transferVal === 'record'" span="24">
            <Form-item :label="$t('uiTemplate.YSLX')" prop="hdfsCompress" :label-width="120">
                <Wb-select v-model="subData.compress" :placeholder="$t('uiTemplate.XZYSLX')">
                    <wb-option v-for="item in compressList" :key="item" :value="item" :label="item" />
                </Wb-select>
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.BM')" prop="encoding" :label-width="120">
                <Wb-select v-model="subData.encoding" :placeholder="$t('uiTemplate.QXZBM')">
                    <wb-option v-for="item in encodingList" :key="item" :value="item" :label="item" />
                </Wb-select>
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('uiTemplate.WJMQZ')" prop="fileName" :label-width="120">
                <wb-input v-model="subData.fileName" :placeholder="$t('uiTemplate.QSRWJMQZ')" />
            </Form-item>
        </Cell>
        <Cell v-if="transferVal === 'record'" span="24">
            <Form-item :label="$t('uiTemplate.ZDFGF')" prop="fieldDelimiter" :label-width="120">
                <Wb-select v-model="subData.fieldDelimiter" filterable @on-search="search">
                    <Wb-option v-for="(item, index) in options" :key="index" :value="item.value">
                    {{ item.label }}
                    </Wb-option>
                </Wb-select>
            </Form-item>
        </Cell>
        <Cell span="24">
            <Form-item :label="$t('message.newUitemplate.Transferthedatasource')" :label-width="120">
                <Radio v-model="subData.transit">
                SFTP {{ $t('message.newUitemplate.Willusethedirectorysemaphorefileread/writesynchronization') }}
            </Radio>
            </Form-item>
            <!-- <span style="display: inline-block; padding-right: 12px; width: 120px; text-align: right;">{{ $t('message.newUitemplate.Transferthedatasource') }}</span>
            <Wb-button type="ghost">
            <Radio v-model="subData.transit">
                SFTP {{$t('message.newUitemplate.Willusethedirectorysemaphorefileread/writesynchronization')}}
            </Radio>
            </Wb-button> -->
        </Cell>
        <Cell span="24">
            &nbsp;
        </Cell>
    </Row>
</template>
<script>
import fieldDelimiterMixin from '../../mixin/fieldDelimiterMixin';
export default {
    name: 'sftpSecond',
    mixins: [fieldDelimiterMixin],
    props: {
        stepSecondData: {
            tepy: Object,
            default: {}
        },
        sourceOrigin: {
            tepy: Array,
            default: []
        },
        dsLoading: {
            type: Boolean,
            default: false
        }
    },
    data() {
        return {
            subData: this.stepSecondData,
            encodingList: [
                'UTF-8',
                'ISO-8859-1',
                'GB2312',
                'GBK',
                'UTF-16'
            ],
            compressList: [
                'gzip', 'bzip2', 'zip'
            ]
        }
    },
    watch: {
        subData: {
            handler(val) {
                this.$emit('stepSecondData', val)
            },
            deep: true
        },
        transferVal(val) {
            if (val === 'stream') {
                this.subData.fieldDelimiter = '';
                this.subData.compress = '';
            }
        }
    },
    computed: {
        transferVal() {
            return this.FesFesx.firstIsSelectRecord;
        }
    },
    methods: {

    }
}
</script>

