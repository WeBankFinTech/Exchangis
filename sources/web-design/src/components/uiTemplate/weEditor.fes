<template>
  <div
    class="we-editor" />
</template>
<script>
import monaco from '../../plugin/monaco-loader.js';
import {merge, debounce} from 'lodash';
const types = {
    code: {
        theme: 'defaultView'
    },
    log: {
        language: 'log',
        theme: 'logview',
        readOnly: true,
        glyphMargin: false,
        selectOnLineNumbers: false,
        wordWrap: 'on'
    }
};
export default {
    name: 'WeEditor',
    props: {
        id: {
            type: String,
            required: false
        },
        type: {
            type: String,
            default: 'code'
        },
        theme: {
            type: String,
            default: 'vs'
        },
        language: {
            type: String,
            default: 'java'
        },
        value: {
            type: String,
            default: ''
        },
        readOnly: Boolean,
        options: Object,
        executable: {
            type: Boolean,
            default: true
        },
        scriptType: String,
        application: String,
        lineNumbers: 'off'
    },
    data() {
        return {
            editor: null,
            editorModel: null,
            decorations: null,
            parseErrorLine: 0,
            isParserClose: false,
            sqlParser: null
        };
    },
    computed: {
        currentConfig() {
            let typeConfig = types.code;
            let config = merge(
                {
                    automaticLayout: true,
                    scrollBeyondLastLine: false,
                    minimap: {
                        enabled: false
                    },
                    readOnly: this.readOnly,
                    glyphMargin: true
                },
                typeConfig,
                // this.options,
                {
                    value: this.value,
                    theme: this.theme,
                    language: this.language
                },
            );
            return config;
        }
    },
    watch: {
        'value': function (newValue, oldValue) {
            if (this.editor) {
                if (newValue == this.getValue() ) {
                    return;
                }
                let readOnly = this.editor.getConfiguration().readOnly;
                if (readOnly) {
                    this.editor.setValue(newValue);
                } else {
                    let range = this.editor.getModel().getFullModelRange();
                    const text = newValue;
                    const op = {
                        identifier: {
                            major: 1,
                            minor: 1
                        },
                        range,
                        text,
                        forceMoveMarkers: true
                    };
                    this.editor.executeEdits('insertValue', [op]);
                }
            }
        }
    },
    mounted() {
        this.initMonaco();
    },
    methods: {
        initMonaco() {
            this.editor = monaco.editor.create(this.$el, this.currentConfig);
            this.editorModel = this.editor.getModel();
            this.$emit('onload');
            this.editor.onDidScrollChange(debounce((e) => {
                this.$emit('scrollChange', e);
            }), 300);
            this.editor.onDidChangeModelContent(debounce(() => {
                this.$emit('input', this.getValue());
            }), 100);
        },
        getValue() {
            return this.editor.getValue({
                lineEnding: '\n',
                preserveBOM: false
            });
        }
    }
}
</script>
<style lang="scss" scoped>
.we-editor{
	height: 100%;
	width: 100%;

	a {
		color: #646465 !important;
	}
	.glyphMarginClass {
		background: #ff9900;
	}
	.contentClass {
		background: #fad8a483;
	}
	.inlineDecoration {
		position: relative;
		color: #ff9900 !important;
		cursor: pointer;
		font-style: oblique;
		&::after {
			content: '';
			position: absolute;
			bottom: -2px;
			left: 5%;
			width: 90%;
			height: 2px;
			background: -webkit-linear-gradient(315deg, transparent, transparent 45%, #ed4014, transparent 55%, transparent 100%),-webkit-linear-gradient(45deg, transparent, transparent 45%, #ed4014, transparent 55%, transparent 100%);
			background-size: 4px 4px;
			background-repeat: repeat-x;
		}
	}
	.highRiskGrammar {
		color: red;
	}
}

</style>
