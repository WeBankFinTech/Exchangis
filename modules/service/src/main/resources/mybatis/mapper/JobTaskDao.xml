<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.webank.wedatasphere.exchangis.job.dao.JobTaskDao">
    <resultMap id="result" type="JobTask">
        <result property="id" column="ID"/>
        <result property="executerAddress" column="executer_address"/>
        <result property="jobId" column="job_id"/>
        <result property="triggerType" column="trigger_type"/>
        <result property="triggerTime" column="trigger_time"/>
        <result property="triggerStatus" column="trigger_status"/>
        <result property="triggerMsg" column="trigger_msg"/>
        <result property="operater" column="operater"/>
        <result property="status" column="status"/>
        <result property="runTimes" column="run_times"/>
        <result property="executeMsg" column="execute_msg"/>
        <result property="completeTime" column="complete_time"/>
        <result property="disposable" column="disposable"/>
        <result property="version" column="version"/>
        <result property="jobName" column="job_name"/>
        <result property="projectId" column="project_id"/>
        <result property="jobCreateUser" column="job_create_user"/>
        <result property="jobAlarmUser" column="job_alarm_user"/>
        <result property="stateSpeed" column="state_speed"/>
        <result property="speedLimit" column="speed_limit_mb"/>
    </resultMap>
    <sql id="columns">
        id, executer_address, job_id, trigger_type, trigger_time, trigger_status,
        trigger_msg, operater, status, run_times, execute_msg, disposable, complete_time, version,
         job_name, project_id, job_create_user, job_alarm_user, state_speed, speed_limit_mb
    </sql>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        <![CDATA[

        INSERT INTO exchangis_job_task (
         id, executer_address,job_id, job_name, project_id, job_create_user, job_alarm_user, trigger_type,trigger_time,trigger_status,trigger_msg,operater,status,
         run_times, disposable, execute_msg,complete_time
        ) VALUES (
         #{id},
         #{executerAddress} ,
         #{jobId} ,
         #{jobName},
         #{projectId},
         #{jobCreateUser},
         #{jobAlarmUser},
          #{triggerType} ,
         #{triggerTime} ,
         #{triggerStatus} ,
         #{triggerMsg},
         #{operater},
         #{status},
         #{runTimes},
         #{disposable},
         #{executeMsg},
         #{completeTime}
        )

        ]]>
    </insert>

    <update id="update">
        <![CDATA[
        UPDATE exchangis_job_task SET
        executer_address = #{executerAddress},
        job_id = #{jobId},
        job_name = #{jobName},
        job_create_user = #{jobCreateUser},
        job_alarm_user = #{jobAlarmUser},
        trigger_status = #{triggerStatus},
        trigger_msg=#{triggerMsg},
        operater=#{operater},
        status=#{status},
        run_times=#{runTimes},
        disposable=#{disposable},
        execute_msg=#{executeMsg},
        complete_time=#{completeTime},
        state_speed=#{stateSpeed,jdbcType=NUMERIC}
        WHERE
        ID = #{id} and version <= #{version}
        ]]>
    </update>

    <update id="updateStates">
      <foreach collection="list" item="state">
          <![CDATA[UPDATE exchangis_job_task SET state_speed=#{state.stateSpeed}, executer_address = #{state.executerAddress}
            WHERE ID = #{state.id} and version <= #{state.version};]]>
      </foreach>
    </update>

    <update id="limitSpeed">
          <![CDATA[UPDATE exchangis_job_task SET speed_limit_mb=#{speedLimit} WHERE ID = #{id};]]>
    </update>

    <delete id="delete">
        DELETE FROM exchangis_job_task WHERE
        ID in (
        <foreach collection="ids" item="value" separator=",">
            ${value}
        </foreach>
        )

    </delete>

    <select id="selectOne" resultMap="result">
        SELECT
        <include refid="columns"/>
        <![CDATA[
       FROM exchangis_job_task WHERE id = #{id}
     ]]>
    </select>

    <select id="selectOneAndLock" resultMap="result">
        SELECT
        <include refid="columns"/>
        <![CDATA[ FROM exchangis_job_task WHERE id = #{id} FOR UPDATE; ]]>
    </select>

    <select id="selectByIdList" resultMap="result">
          SELECT <include refid="columns"/> FROM
        <![CDATA[ exchangis_job_task
        WHERE id IN (
        ]]>
        <foreach collection="list" item="value" separator=",">
            ${value}
        </foreach>
        <![CDATA[) ORDER BY FIELD(id,]]>
        <foreach collection="list" item="value" separator=",">
            ${value}
        </foreach>
        <![CDATA[);]]>
    </select>
    <sql id="findPageWhere">
        <where>
            <if test="taskId != null and taskId != ''">
                AND ID = #{taskId}
            </if>
            <if test="jobId != null and jobId != ''">
                AND job_id = #{jobId}
            </if>
            <if test="triggerTimeBegin != null">
                AND trigger_time &gt;= #{triggerTimeBegin}
            </if>
            <if test="triggerTimeEnd != null">
                AND trigger_time &lt;= #{triggerTimeEnd}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="jobName != null and jobName != ''">
                AND job_name = #{jobName}
            </if>
            <if test="fuzzyName != null and fuzzyName != ''">
                AND job_name like concat('%', #{fuzzyName}, '%')
            </if>
            <if test="userDataAuth != null">
                <choose>
                    <when test="createUser != null">
                        AND ( job_create_user = #{createUser, jdbcType=VARCHAR}
                        <if test="userDataAuth.size > 0">
                            OR project_id in (
                            <foreach collection="userDataAuth" item="value" separator=",">
                                #{value}
                            </foreach>
                            )
                        </if>
                        )
                    </when>
                    <otherwise>
                        <if test="userDataAuth.size > 0">
                            AND project_id in (
                            <foreach collection="userDataAuth" item="value" separator=",">
                                #{value}
                            </foreach>
                            )
                        </if>
                    </otherwise>
                </choose>
            </if>
        </where>
    </sql>

    <select id="selectAllList" resultMap="result">
        SELECT
        <include refid="columns"/>
        FROM  exchangis_job_task
        <include refid="findPageWhere"/>
    </select>

    <select id="count" resultType="long">
        SELECT count(*)  FROM  exchangis_job_task
        <include refid="findPageWhere"/>
    </select>

    <select id="findPage" resultMap="result">
        SELECT
        <include refid="columns"/>
        FROM  exchangis_job_task
        <include refid="findPageWhere"/>
        ORDER BY id DESC
    </select>
    <!--Find running (and timeout) tasks batches-->
    <select id="findRunInBatch" resultMap="result">
     SELECT * FROM (
      SELECT
      <include refid="columns"/>
      FROM  exchangis_job_task
      <where>
          <if test="taskId > 0">
               id > #{taskId}
          </if>
          AND status = 'RUNNING'
      </where>
      UNION
      SELECT
      <include refid="columns"/>
      FROM  exchangis_job_task
      <where>
          <if test="taskId > 0">
            id > #{taskId}
          </if>
          AND status = 'RUNNING_TIMEOUT'
      </where>
      ) c ORDER BY c.id ASC LIMIT ${batchSize};
    </select>
    <select id="findByJobAndTimeInBatch"  resultMap="result">
      SELECT
      <include refid="columns"/>
      <![CDATA[FROM  exchangis_job_task]]>
      <where>
          <![CDATA[job_id = #{jobId}]]>
          <if test="taskId > 0">
              <![CDATA[AND id > #{taskId}]]>
          </if>
          <if test="startTime != null">
              <![CDATA[AND trigger_time >= #{startTime}]]>
          </if>
          <if test="endTime != null">
              <![CDATA[AND trigger_time <= #{endTime}]]>
          </if>
      </where>
      ORDER BY id LIMIT ${batchSize};
    </select>
</mapper>